# 1 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
# 1 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD//"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
# 17 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
# 1 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 1
# 31 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
# 1 "/usr/include/assert.h" 1 3 4
# 35 "/usr/include/assert.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 36 "/usr/include/assert.h" 2 3 4
# 32 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4

# 143 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 209 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 415 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 33 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 35 "/usr/include/stdint.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 2 3 4
# 34 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4

extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 89 "/usr/include/string.h" 3 4
}
# 99 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 122 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));



# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 154 "/usr/include/string.h" 2 3 4


extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 204 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 224 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 251 "/usr/include/string.h" 3 4
}
# 261 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 301 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 328 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 369 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 421 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) throw ();



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 66 "/usr/include/strings.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 94 "/usr/include/strings.h" 3 4
}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}
# 433 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 499 "/usr/include/string.h" 3 4
}
# 35 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 2


# 36 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
namespace libzpaq {


typedef uint8_t U8;
typedef uint16_t U16;
typedef uint32_t U32;
typedef uint64_t U64;


void* calloc(size_t, size_t);
void free(void*);


extern void error(const char* msg);





class Reader {
public:
  virtual int get() = 0;
  virtual int read(char* buf, int n);
  virtual ~Reader() {}
};

class Writer {
public:
  virtual void put(int c) = 0;
  virtual void write(const char* buf, int n);
  virtual ~Writer() {}
};


int toU16(const char* p);







template <typename T>
class Array {
  T *data;
  size_t n;
  int offset;
  void operator=(const Array&);
  Array(const Array&);
public:
  Array(size_t sz=0, int ex=0): data(0), n(0), offset(0) {
    resize(sz, ex);}
  void resize(size_t sz, int ex=0);
  ~Array() {resize(0);}
  size_t size() const {return n;}
  int isize() const {return int(n);}
  T& operator[](size_t i) {
# 92 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 3 4
                          (static_cast<void> (0))
# 92 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
                                            ; return data[i];}
  T& operator()(size_t i) {
# 93 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 3 4
                          (static_cast<void> (0))
# 93 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
                                                     ; return data[i&(n-1)];}
};


template<typename T>
void Array<T>::resize(size_t sz, int ex) {
  
# 99 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 3 4
 (static_cast<void> (0))
# 99 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
                     ;
  while (ex>0) {
    if (sz>sz*2) error("Array too big");
    sz*=2, --ex;
  }
  if (n>0) {
    
# 105 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 3 4
   (static_cast<void> (0))
# 105 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
                                 ;
    
# 106 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 3 4
   (static_cast<void> (0))
# 106 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
                             ;
    free((char*)data-offset);
  }
  n=0;
  if (sz==0) return;
  n=sz;
  const size_t nb=128+n*sizeof(T);
  if (nb<=128 || (nb-128)/sizeof(T)!=n) error("Array too big");
  data=(T*)calloc(nb, 1);
  if (!data) error("Out of memory");
  offset=64-(((char*)data-(char*)0)&63);
  
# 117 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 3 4
 (static_cast<void> (0))
# 117 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
                               ;
  data=(T*)((char*)data+offset);
}




class SHA1 {
public:
  void put(int c) {
    U32& r=w[len0>>5&15];
    r=(r<<8)|(c&255);
    if (!(len0+=8)) ++len1;
    if ((len0&511)==0) process();
  }
  double size() const {return len0/8+len1*536870912.0;}
  uint64_t usize() const {return len0/8+(U64(len1)<<29);}
  const char* result();
  SHA1() {init();}
private:
  void init();
  U32 len0, len1;
  U32 h[5];
  U32 w[80];
  char hbuf[20];
  void process();
};




typedef enum {NONE,CONS,CM,ICM,MATCH,AVG,MIX2,MIX,ISSE,SSE} CompType;
extern const int compsize[256];


class ZPAQL {
public:
  ZPAQL();
  ~ZPAQL();
  void clear();
  void inith();
  void initp();
  double memory();
  void run(U32 input);
  int read(Reader* in2);
  bool write(Writer* out2, bool pp);
  int step(U32 input, int mode);

  Writer* output;
  SHA1* sha1;
  U32 H(int i) {return h(i);}

  void flush();
  void outc(int c) {
    if (c<0 || (outbuf[bufptr]=c, ++bufptr==outbuf.isize())) flush();
  }


  Array<U8> header;
  int cend;
  int hbegin, hend;

private:

  Array<U8> m;
  Array<U32> h;
  Array<U32> r;
  Array<char> outbuf;
  int bufptr;
  U32 a, b, c, d;
  int f;
  int pc;
  int rcode_size;
  U8* rcode;


  int assemble();
  void init(int hbits, int mbits);
  int execute();
  void run0(U32 input);
  void div(U32 x) {if (x) a/=x; else a=0;}
  void mod(U32 x) {if (x) a%=x; else a=0;}
  void swap(U32& x) {a^=x; x^=a; a^=x;}
  void swap(U8& x) {a^=x; x^=a; a^=x;}
  void err();
};
# 211 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
struct Component {
  size_t limit;
  size_t cxt;
  size_t a, b, c;
  Array<U32> cm;
  Array<U8> ht;
  Array<U16> a16;
  void init();
  Component() {init();}
};




class StateTable {
  enum {N=64};
  int num_states(int n0, int n1);
  void discount(int& n0);
  void next_state(int& n0, int& n1, int y);
public:
  U8 ns[1024];
  int next(int state, int y) {
    
# 233 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 3 4
   (static_cast<void> (0))
# 233 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
                                ;
    
# 234 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 3 4
   (static_cast<void> (0))
# 234 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
                      ;
    return ns[state*4+y];
  }
  int cminit(int state) {
    
# 238 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 3 4
   (static_cast<void> (0))
# 238 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
                                ;
    return ((ns[state*4+3]*2+1)<<22)/(ns[state*4+2]+ns[state*4+3]+1);
  }
  StateTable();
};




class Predictor {
public:
  Predictor(ZPAQL&);
  ~Predictor();
  void init();
  int predict();
  void update(int y);
  int stat(int);
  bool isModeled() {
    
# 256 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 3 4
   (static_cast<void> (0))
# 256 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
                             ;
    return z.header[6]!=0;
  }
private:


  int c8;
  int hmap4;
  int p[256];
  U32 h[256];
  ZPAQL& z;
  Component comp[256];


  int predict0();
  void update0(int y);
  int dt2k[256];
  int dt[1024];
  U16 squasht[4096];
  short stretcht[32768];
  StateTable st;
  U8* pcode;
  int pcode_size;


  void train(Component& cr, int y) {
    
# 282 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 3 4
   (static_cast<void> (0))
# 282 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
                       ;
    U32& pn=cr.cm(cr.cxt);
    U32 count=pn&0x3ff;
    int error=y*32767-(cr.cm(cr.cxt)>>17);
    pn+=(error*dt[count]&-1024)+(count<cr.limit);
  }


  int squash(int x) {
    
# 291 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 3 4
   (static_cast<void> (0))
# 291 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
                              ;
    return squasht[x+2048];
  }


  int stretch(int x) {
    
# 297 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 3 4
   (static_cast<void> (0))
# 297 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
                           ;
    return stretcht[x];
  }


  int clamp2k(int x) {
    if (x<-2048) return -2048;
    else if (x>2047) return 2047;
    else return x;
  }


  int clamp512k(int x) {
    if (x<-(1<<19)) return -(1<<19);
    else if (x>=(1<<19)) return (1<<19)-1;
    else return x;
  }


  size_t find(Array<U8>& ht, int sizebits, U32 cxt);


  int assemble_p();
};




class Decoder {
public:
  Reader* in;
  Decoder(ZPAQL& z);
  int decompress();
  int skip();
  void init();
  int stat(int x) {return pr.stat(x);}
private:
  U32 low, high;
  U32 curr;
  Predictor pr;
  enum {BUFSIZE=1<<16};
  Array<char> buf;


  int decode(int p);
  void loadbuf();
};



class PostProcessor {
  int state;
  int hsize;
  int ph, pm;
public:
  ZPAQL z;
  PostProcessor(): state(0), hsize(0), ph(0), pm(0) {}
  void init(int h, int m);
  int write(int c);
  int getState() const {return state;}
  void setOutput(Writer* out) {z.output=out;}
  void setSHA1(SHA1* sha1ptr) {z.sha1=sha1ptr;}
};




class Decompresser {
public:
  Decompresser(): z(), dec(z), pp(), state(BLOCK), decode_state(FIRSTSEG) {}
  void setInput(Reader* in) {dec.in=in;}
  bool findBlock(double* memptr = 0);
  void hcomp(Writer* out2) {z.write(out2, false);}
  bool findFilename(Writer* = 0);
  void readComment(Writer* = 0);
  void setOutput(Writer* out) {pp.setOutput(out);}
  void setSHA1(SHA1* sha1ptr) {pp.setSHA1(sha1ptr);}
  bool decompress(int n = -1);
  bool pcomp(Writer* out2) {return pp.z.write(out2, true);}
  void readSegmentEnd(char* sha1string = 0);
  int stat(int x) {return dec.stat(x);}
private:
  ZPAQL z;
  Decoder dec;
  PostProcessor pp;
  enum {BLOCK, FILENAME, COMMENT, DATA, SEGEND} state;
  enum {FIRSTSEG, SEG, SKIP} decode_state;
};



void decompress(Reader* in, Writer* out);
# 398 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
class Encoder {
public:
  Encoder(ZPAQL& z):
    out(0), low(1), high(0xFFFFFFFF), pr(z) {}
  void init();
  void compress(int c);
  int stat(int x) {return pr.stat(x);}
  Writer* out;
private:
  U32 low, high;
  Predictor pr;
  Array<char> buf;
  void encode(int y, int p);
};



class Compressor {
public:
  Compressor(): enc(z), in(0), state(INIT) {}
  void setOutput(Writer* out) {enc.out=out;}
  void writeTag();
  void startBlock(int level);
  void startBlock(const char* hcomp);
  void startSegment(const char* filename = 0, const char* comment = 0);
  void setInput(Reader* i) {in=i;}
  void postProcess(const char* pcomp = 0, int len = 0);
  bool compress(int n = -1);
  void endSegment(const char* sha1string = 0);
  void endBlock();
  int stat(int x) {return enc.stat(x);}
private:
  ZPAQL z;
  Encoder enc;
  Reader* in;
  enum {INIT, BLOCK1, SEG1, BLOCK2, SEG2} state;
};



void compress(Reader* in, Writer* out, int level);

}



# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4


# 29 "/usr/include/stdio.h" 3 4
extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 63 "/usr/include/stdio.h" 3 4
typedef __off_t off_t;






typedef __off64_t off64_t;






typedef __ssize_t ssize_t;






typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();







extern FILE *tmpfile (void) ;
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) throw () __asm__ ("" "__isoc99_sscanf")

                      ;
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 873 "/usr/include/stdio.h" 3 4
}
# 445 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h" 2








# 452 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.h"
typedef int64_t i64;

struct bufRead: public libzpaq::Reader {
 unsigned char *s_buf;
 i64 *s_len;
 i64 total_len;
 int *last_pct;
 bool progress;
 long thread;
 FILE *msgout;

 bufRead(unsigned char *buf_, i64 *n_, i64 total_len_, int *last_pct_, bool progress_, long thread_, FILE *msgout_):
  s_buf(buf_), s_len(n_), total_len(total_len_), last_pct(last_pct_), progress(progress_), thread(thread_), msgout(msgout_) {}

 int get() {
  if (progress && !(*s_len % 128)) {
   int pct = (total_len - *s_len) * 100 / total_len;

   if (pct / 10 != *last_pct / 10) {
    int i;

    fprintf(msgout, "\r\t\t\tZPAQ\t");
    for (i = 0; i < thread; i++)
     fprintf(msgout, "\t");
    fprintf(msgout, "%ld:%i%%  \r",
     thread + 1, pct);
    fflush(msgout);
    *last_pct = pct;
   }
  }

  if (__builtin_expect(!!(*s_len > 0), 1)) {
   (*s_len)--;
   return ((int)(unsigned char)*s_buf++);
  }
  return -1;
 }

 int read(char *buf, int n) {
  if (__builtin_expect(!!(n > *s_len), 0))
   n = *s_len;

  if (__builtin_expect(!!(n > 0), 1)) {
   *s_len -= n;
   memcpy(buf, s_buf, n);
  }
  return n;
 }
};

struct bufWrite: public libzpaq::Writer {
 unsigned char *c_buf;
 i64 *c_len;
 bufWrite(unsigned char *buf_, i64 *n_): c_buf(buf_), c_len(n_) {}

 void put(int c) {
  c_buf[(*c_len)++] = (unsigned char)c;
 }

 void write(const char *buf, int n) {
  memcpy(c_buf + *c_len, buf, n);
  *c_len += n;
 }
};

extern "C" void zpaq_compress(unsigned char *c_buf, i64 *c_len, unsigned char *s_buf, i64 s_len, int level,
         FILE *msgout, bool progress, long thread)
{
 i64 total_len = s_len;
 int last_pct = 100;

 bufRead bufR(s_buf, &s_len, total_len, &last_pct, progress, thread, msgout);
 bufWrite bufW(c_buf, c_len);

 compress (&bufR, &bufW, level);
}

extern "C" void zpaq_decompress(unsigned char *s_buf, i64 *d_len, unsigned char *c_buf, i64 c_len,
    FILE *msgout, bool progress, long thread)
{
 i64 total_len = c_len;
 int last_pct = 100;

 bufRead bufR(c_buf, &c_len, total_len, &last_pct, progress, thread, msgout);
 bufWrite bufW(s_buf, d_len);

 decompress(&bufR, &bufW);
}
# 18 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 2

# 1 "/usr/include/c++/9/stdlib.h" 1 3
# 36 "/usr/include/c++/9/stdlib.h" 3
# 1 "/usr/include/c++/9/cstdlib" 1 3
# 39 "/usr/include/c++/9/cstdlib" 3
       
# 40 "/usr/include/c++/9/cstdlib" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 1 3
# 256 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3

# 256 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 278 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 528 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/os_defines.h" 1 3
# 529 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/cpu_defines.h" 1 3
# 532 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 2 3
# 42 "/usr/include/c++/9/cstdlib" 2 3
# 75 "/usr/include/c++/9/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;
# 97 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __pid_t pid_t;





typedef __id_t id_t;
# 114 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;







typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 24 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 25 "/usr/include/endian.h" 2 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 610 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 688 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 698 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 710 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 720 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 742 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 752 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 762 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 774 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 957 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1014 "/usr/include/stdlib.h" 2 3 4
# 1023 "/usr/include/stdlib.h" 3 4
}
# 76 "/usr/include/c++/9/cstdlib" 2 3

# 1 "/usr/include/c++/9/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/9/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/9/bits/std_abs.h" 3
# 46 "/usr/include/c++/9/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "/usr/include/c++/9/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 101 "/usr/include/c++/9/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/9/cstdlib" 2 3
# 121 "/usr/include/c++/9/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/9/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/9/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/9/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 20 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 2

# 1 "/usr/include/c++/9/math.h" 1 3
# 36 "/usr/include/c++/9/math.h" 3
# 1 "/usr/include/c++/9/cmath" 1 3
# 39 "/usr/include/c++/9/cmath" 3
       
# 40 "/usr/include/c++/9/cmath" 3


# 1 "/usr/include/c++/9/bits/cpp_type_traits.h" 1 3
# 35 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
       
# 36 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
# 67 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
extern "C++" {

namespace std __attribute__ ((__visibility__ ("default")))
{


  struct __true_type { };
  struct __false_type { };

  template<bool>
    struct __truth_type
    { typedef __false_type __type; };

  template<>
    struct __truth_type<true>
    { typedef __true_type __type; };



  template<class _Sp, class _Tp>
    struct __traitor
    {
      enum { __value = bool(_Sp::__value) || bool(_Tp::__value) };
      typedef typename __truth_type<__value>::__type __type;
    };


  template<typename, typename>
    struct __are_same
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __are_same<_Tp, _Tp>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_void
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_void<void>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_integer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };





  template<>
    struct __is_integer<bool>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 184 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
  template<>
    struct __is_integer<char16_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<char32_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_integer<short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned short>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned int>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_integer<unsigned long long>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 270 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
template<> struct __is_integer<__int128> { enum { __value = 1 }; typedef __true_type __type; }; template<> struct __is_integer<unsigned __int128> { enum { __value = 1 }; typedef __true_type __type; };
# 287 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_floating
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };


  template<>
    struct __is_floating<float>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_floating<long double>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_pointer
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<typename _Tp>
    struct __is_pointer<_Tp*>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };




  template<typename _Tp>
    struct __is_arithmetic
    : public __traitor<__is_integer<_Tp>, __is_floating<_Tp> >
    { };




  template<typename _Tp>
    struct __is_scalar
    : public __traitor<__is_arithmetic<_Tp>, __is_pointer<_Tp> >
    { };




  template<typename _Tp>
    struct __is_char
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_char<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<>
    struct __is_char<wchar_t>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };


  template<typename _Tp>
    struct __is_byte
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };

  template<>
    struct __is_byte<char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<signed char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };

  template<>
    struct __is_byte<unsigned char>
    {
      enum { __value = 1 };
      typedef __true_type __type;
    };
# 417 "/usr/include/c++/9/bits/cpp_type_traits.h" 3
  template<typename _Tp>
    struct __is_move_iterator
    {
      enum { __value = 0 };
      typedef __false_type __type;
    };



  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
    { return __it; }


}
}
# 43 "/usr/include/c++/9/cmath" 2 3
# 1 "/usr/include/c++/9/ext/type_traits.h" 1 3
# 32 "/usr/include/c++/9/ext/type_traits.h" 3
       
# 33 "/usr/include/c++/9/ext/type_traits.h" 3




extern "C++" {

namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  template<bool, typename>
    struct __enable_if
    { };

  template<typename _Tp>
    struct __enable_if<true, _Tp>
    { typedef _Tp __type; };



  template<bool _Cond, typename _Iftrue, typename _Iffalse>
    struct __conditional_type
    { typedef _Iftrue __type; };

  template<typename _Iftrue, typename _Iffalse>
    struct __conditional_type<false, _Iftrue, _Iffalse>
    { typedef _Iffalse __type; };



  template<typename _Tp>
    struct __add_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __add_unsigned<char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<signed char>
    { typedef unsigned char __type; };

  template<>
    struct __add_unsigned<short>
    { typedef unsigned short __type; };

  template<>
    struct __add_unsigned<int>
    { typedef unsigned int __type; };

  template<>
    struct __add_unsigned<long>
    { typedef unsigned long __type; };

  template<>
    struct __add_unsigned<long long>
    { typedef unsigned long long __type; };


  template<>
    struct __add_unsigned<bool>;

  template<>
    struct __add_unsigned<wchar_t>;



  template<typename _Tp>
    struct __remove_unsigned
    {
    private:
      typedef __enable_if<std::__is_integer<_Tp>::__value, _Tp> __if_type;

    public:
      typedef typename __if_type::__type __type;
    };

  template<>
    struct __remove_unsigned<char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned char>
    { typedef signed char __type; };

  template<>
    struct __remove_unsigned<unsigned short>
    { typedef short __type; };

  template<>
    struct __remove_unsigned<unsigned int>
    { typedef int __type; };

  template<>
    struct __remove_unsigned<unsigned long>
    { typedef long __type; };

  template<>
    struct __remove_unsigned<unsigned long long>
    { typedef long long __type; };


  template<>
    struct __remove_unsigned<bool>;

  template<>
    struct __remove_unsigned<wchar_t>;



  template<typename _Type>
    inline bool
    __is_null_pointer(_Type* __ptr)
    { return __ptr == 0; }

  template<typename _Type>
    inline bool
    __is_null_pointer(_Type)
    { return false; }


  inline bool
  __is_null_pointer(std::nullptr_t)
  { return true; }



  template<typename _Tp, bool = std::__is_integer<_Tp>::__value>
    struct __promote
    { typedef double __type; };




  template<typename _Tp>
    struct __promote<_Tp, false>
    { };

  template<>
    struct __promote<long double>
    { typedef long double __type; };

  template<>
    struct __promote<double>
    { typedef double __type; };

  template<>
    struct __promote<float>
    { typedef float __type; };

  template<typename _Tp, typename _Up,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type>
    struct __promote_2
    {
      typedef __typeof__(_Tp2() + _Up2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type>
    struct __promote_3
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2()) __type;
    };

  template<typename _Tp, typename _Up, typename _Vp, typename _Wp,
           typename _Tp2 = typename __promote<_Tp>::__type,
           typename _Up2 = typename __promote<_Up>::__type,
           typename _Vp2 = typename __promote<_Vp>::__type,
           typename _Wp2 = typename __promote<_Wp>::__type>
    struct __promote_4
    {
      typedef __typeof__(_Tp2() + _Up2() + _Vp2() + _Wp2()) __type;
    };


}
}
# 44 "/usr/include/c++/9/cmath" 2 3

# 1 "/usr/include/math.h" 1 3 4
# 27 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/math.h" 2 3 4






extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libm-simd-decl-stubs.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/math-vector.h" 2 3 4
# 41 "/usr/include/math.h" 2 3 4
# 138 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/flt-eval-method.h" 1 3 4
# 139 "/usr/include/math.h" 2 3 4
# 149 "/usr/include/math.h" 3 4
typedef float float_t;
typedef double double_t;
# 190 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-logb.h" 1 3 4
# 191 "/usr/include/math.h" 2 3 4
# 233 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/fp-fast.h" 1 3 4
# 234 "/usr/include/math.h" 2 3 4



enum
  {
    FP_INT_UPWARD =

      0,
    FP_INT_DOWNWARD =

      1,
    FP_INT_TOWARDZERO =

      2,
    FP_INT_TONEARESTFROMZERO =

      3,
    FP_INT_TONEAREST =

      4,
  };
# 289 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassify (double __value) throw ()
     __attribute__ ((__const__));


extern int __signbit (double __value) throw ()
     __attribute__ ((__const__));



extern int __isinf (double __value) throw () __attribute__ ((__const__));


extern int __finite (double __value) throw () __attribute__ ((__const__));


extern int __isnan (double __value) throw () __attribute__ ((__const__));


extern int __iseqsig (double __x, double __y) throw ();


extern int __issignaling (double __value) throw ()
     __attribute__ ((__const__));
# 290 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double acos (double __x) throw (); extern double __acos (double __x) throw ();

extern double asin (double __x) throw (); extern double __asin (double __x) throw ();

extern double atan (double __x) throw (); extern double __atan (double __x) throw ();

extern double atan2 (double __y, double __x) throw (); extern double __atan2 (double __y, double __x) throw ();


 extern double cos (double __x) throw (); extern double __cos (double __x) throw ();

 extern double sin (double __x) throw (); extern double __sin (double __x) throw ();

extern double tan (double __x) throw (); extern double __tan (double __x) throw ();




extern double cosh (double __x) throw (); extern double __cosh (double __x) throw ();

extern double sinh (double __x) throw (); extern double __sinh (double __x) throw ();

extern double tanh (double __x) throw (); extern double __tanh (double __x) throw ();



 extern void sincos (double __x, double *__sinx, double *__cosx) throw (); extern void __sincos (double __x, double *__sinx, double *__cosx) throw ()
                                                        ;




extern double acosh (double __x) throw (); extern double __acosh (double __x) throw ();

extern double asinh (double __x) throw (); extern double __asinh (double __x) throw ();

extern double atanh (double __x) throw (); extern double __atanh (double __x) throw ();





 extern double exp (double __x) throw (); extern double __exp (double __x) throw ();


extern double frexp (double __x, int *__exponent) throw (); extern double __frexp (double __x, int *__exponent) throw ();


extern double ldexp (double __x, int __exponent) throw (); extern double __ldexp (double __x, int __exponent) throw ();


 extern double log (double __x) throw (); extern double __log (double __x) throw ();


extern double log10 (double __x) throw (); extern double __log10 (double __x) throw ();


extern double modf (double __x, double *__iptr) throw (); extern double __modf (double __x, double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern double exp10 (double __x) throw (); extern double __exp10 (double __x) throw ();




extern double expm1 (double __x) throw (); extern double __expm1 (double __x) throw ();


extern double log1p (double __x) throw (); extern double __log1p (double __x) throw ();


extern double logb (double __x) throw (); extern double __logb (double __x) throw ();




extern double exp2 (double __x) throw (); extern double __exp2 (double __x) throw ();


extern double log2 (double __x) throw (); extern double __log2 (double __x) throw ();






 extern double pow (double __x, double __y) throw (); extern double __pow (double __x, double __y) throw ();


extern double sqrt (double __x) throw (); extern double __sqrt (double __x) throw ();



extern double hypot (double __x, double __y) throw (); extern double __hypot (double __x, double __y) throw ();




extern double cbrt (double __x) throw (); extern double __cbrt (double __x) throw ();






extern double ceil (double __x) throw () __attribute__ ((__const__)); extern double __ceil (double __x) throw () __attribute__ ((__const__));


extern double fabs (double __x) throw () __attribute__ ((__const__)); extern double __fabs (double __x) throw () __attribute__ ((__const__));


extern double floor (double __x) throw () __attribute__ ((__const__)); extern double __floor (double __x) throw () __attribute__ ((__const__));


extern double fmod (double __x, double __y) throw (); extern double __fmod (double __x, double __y) throw ();
# 182 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int finite (double __value) throw () __attribute__ ((__const__));


extern double drem (double __x, double __y) throw (); extern double __drem (double __x, double __y) throw ();



extern double significand (double __x) throw (); extern double __significand (double __x) throw ();






extern double copysign (double __x, double __y) throw () __attribute__ ((__const__)); extern double __copysign (double __x, double __y) throw () __attribute__ ((__const__));




extern double nan (const char *__tagb) throw (); extern double __nan (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern double j0 (double) throw (); extern double __j0 (double) throw ();
extern double j1 (double) throw (); extern double __j1 (double) throw ();
extern double jn (int, double) throw (); extern double __jn (int, double) throw ();
extern double y0 (double) throw (); extern double __y0 (double) throw ();
extern double y1 (double) throw (); extern double __y1 (double) throw ();
extern double yn (int, double) throw (); extern double __yn (int, double) throw ();





extern double erf (double) throw (); extern double __erf (double) throw ();
extern double erfc (double) throw (); extern double __erfc (double) throw ();
extern double lgamma (double) throw (); extern double __lgamma (double) throw ();




extern double tgamma (double) throw (); extern double __tgamma (double) throw ();





extern double gamma (double) throw (); extern double __gamma (double) throw ();







extern double lgamma_r (double, int *__signgamp) throw (); extern double __lgamma_r (double, int *__signgamp) throw ();






extern double rint (double __x) throw (); extern double __rint (double __x) throw ();


extern double nextafter (double __x, double __y) throw (); extern double __nextafter (double __x, double __y) throw ();

extern double nexttoward (double __x, long double __y) throw (); extern double __nexttoward (double __x, long double __y) throw ();




extern double nextdown (double __x) throw (); extern double __nextdown (double __x) throw ();

extern double nextup (double __x) throw (); extern double __nextup (double __x) throw ();



extern double remainder (double __x, double __y) throw (); extern double __remainder (double __x, double __y) throw ();



extern double scalbn (double __x, int __n) throw (); extern double __scalbn (double __x, int __n) throw ();



extern int ilogb (double __x) throw (); extern int __ilogb (double __x) throw ();




extern long int llogb (double __x) throw (); extern long int __llogb (double __x) throw ();




extern double scalbln (double __x, long int __n) throw (); extern double __scalbln (double __x, long int __n) throw ();



extern double nearbyint (double __x) throw (); extern double __nearbyint (double __x) throw ();



extern double round (double __x) throw () __attribute__ ((__const__)); extern double __round (double __x) throw () __attribute__ ((__const__));



extern double trunc (double __x) throw () __attribute__ ((__const__)); extern double __trunc (double __x) throw () __attribute__ ((__const__));




extern double remquo (double __x, double __y, int *__quo) throw (); extern double __remquo (double __x, double __y, int *__quo) throw ();






extern long int lrint (double __x) throw (); extern long int __lrint (double __x) throw ();
__extension__
extern long long int llrint (double __x) throw (); extern long long int __llrint (double __x) throw ();



extern long int lround (double __x) throw (); extern long int __lround (double __x) throw ();
__extension__
extern long long int llround (double __x) throw (); extern long long int __llround (double __x) throw ();



extern double fdim (double __x, double __y) throw (); extern double __fdim (double __x, double __y) throw ();


extern double fmax (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmax (double __x, double __y) throw () __attribute__ ((__const__));


extern double fmin (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmin (double __x, double __y) throw () __attribute__ ((__const__));


extern double fma (double __x, double __y, double __z) throw (); extern double __fma (double __x, double __y, double __z) throw ();




extern double roundeven (double __x) throw () __attribute__ ((__const__)); extern double __roundeven (double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfp (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfp (double __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfp (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfp (double __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpx (double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpx (double __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpx (double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpx (double __x, int __round, unsigned int __width) throw ()
                               ;


extern double fmaxmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fmaxmag (double __x, double __y) throw () __attribute__ ((__const__));


extern double fminmag (double __x, double __y) throw () __attribute__ ((__const__)); extern double __fminmag (double __x, double __y) throw () __attribute__ ((__const__));


extern int canonicalize (double *__cx, const double *__x) throw ();




extern int totalorder (const double *__x, const double *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermag (const double *__x, const double *__y) throw ()

     __attribute__ ((__pure__));


extern double getpayload (const double *__x) throw (); extern double __getpayload (const double *__x) throw ();


extern int setpayload (double *__x, double __payload) throw ();


extern int setpayloadsig (double *__x, double __payload) throw ();







extern double scalb (double __x, double __n) throw (); extern double __scalb (double __x, double __n) throw ();
# 291 "/usr/include/math.h" 2 3 4
# 306 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf (float __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf (float __value) throw ()
     __attribute__ ((__const__));



extern int __isinff (float __value) throw () __attribute__ ((__const__));


extern int __finitef (float __value) throw () __attribute__ ((__const__));


extern int __isnanf (float __value) throw () __attribute__ ((__const__));


extern int __iseqsigf (float __x, float __y) throw ();


extern int __issignalingf (float __value) throw ()
     __attribute__ ((__const__));
# 307 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern float acosf (float __x) throw (); extern float __acosf (float __x) throw ();

extern float asinf (float __x) throw (); extern float __asinf (float __x) throw ();

extern float atanf (float __x) throw (); extern float __atanf (float __x) throw ();

extern float atan2f (float __y, float __x) throw (); extern float __atan2f (float __y, float __x) throw ();


 extern float cosf (float __x) throw (); extern float __cosf (float __x) throw ();

 extern float sinf (float __x) throw (); extern float __sinf (float __x) throw ();

extern float tanf (float __x) throw (); extern float __tanf (float __x) throw ();




extern float coshf (float __x) throw (); extern float __coshf (float __x) throw ();

extern float sinhf (float __x) throw (); extern float __sinhf (float __x) throw ();

extern float tanhf (float __x) throw (); extern float __tanhf (float __x) throw ();



 extern void sincosf (float __x, float *__sinx, float *__cosx) throw (); extern void __sincosf (float __x, float *__sinx, float *__cosx) throw ()
                                                        ;




extern float acoshf (float __x) throw (); extern float __acoshf (float __x) throw ();

extern float asinhf (float __x) throw (); extern float __asinhf (float __x) throw ();

extern float atanhf (float __x) throw (); extern float __atanhf (float __x) throw ();





 extern float expf (float __x) throw (); extern float __expf (float __x) throw ();


extern float frexpf (float __x, int *__exponent) throw (); extern float __frexpf (float __x, int *__exponent) throw ();


extern float ldexpf (float __x, int __exponent) throw (); extern float __ldexpf (float __x, int __exponent) throw ();


 extern float logf (float __x) throw (); extern float __logf (float __x) throw ();


extern float log10f (float __x) throw (); extern float __log10f (float __x) throw ();


extern float modff (float __x, float *__iptr) throw (); extern float __modff (float __x, float *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern float exp10f (float __x) throw (); extern float __exp10f (float __x) throw ();




extern float expm1f (float __x) throw (); extern float __expm1f (float __x) throw ();


extern float log1pf (float __x) throw (); extern float __log1pf (float __x) throw ();


extern float logbf (float __x) throw (); extern float __logbf (float __x) throw ();




extern float exp2f (float __x) throw (); extern float __exp2f (float __x) throw ();


extern float log2f (float __x) throw (); extern float __log2f (float __x) throw ();






 extern float powf (float __x, float __y) throw (); extern float __powf (float __x, float __y) throw ();


extern float sqrtf (float __x) throw (); extern float __sqrtf (float __x) throw ();



extern float hypotf (float __x, float __y) throw (); extern float __hypotf (float __x, float __y) throw ();




extern float cbrtf (float __x) throw (); extern float __cbrtf (float __x) throw ();






extern float ceilf (float __x) throw () __attribute__ ((__const__)); extern float __ceilf (float __x) throw () __attribute__ ((__const__));


extern float fabsf (float __x) throw () __attribute__ ((__const__)); extern float __fabsf (float __x) throw () __attribute__ ((__const__));


extern float floorf (float __x) throw () __attribute__ ((__const__)); extern float __floorf (float __x) throw () __attribute__ ((__const__));


extern float fmodf (float __x, float __y) throw (); extern float __fmodf (float __x, float __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinff (float __value) throw () __attribute__ ((__const__));




extern int finitef (float __value) throw () __attribute__ ((__const__));


extern float dremf (float __x, float __y) throw (); extern float __dremf (float __x, float __y) throw ();



extern float significandf (float __x) throw (); extern float __significandf (float __x) throw ();






extern float copysignf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __copysignf (float __x, float __y) throw () __attribute__ ((__const__));




extern float nanf (const char *__tagb) throw (); extern float __nanf (const char *__tagb) throw ();
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanf (float __value) throw () __attribute__ ((__const__));





extern float j0f (float) throw (); extern float __j0f (float) throw ();
extern float j1f (float) throw (); extern float __j1f (float) throw ();
extern float jnf (int, float) throw (); extern float __jnf (int, float) throw ();
extern float y0f (float) throw (); extern float __y0f (float) throw ();
extern float y1f (float) throw (); extern float __y1f (float) throw ();
extern float ynf (int, float) throw (); extern float __ynf (int, float) throw ();





extern float erff (float) throw (); extern float __erff (float) throw ();
extern float erfcf (float) throw (); extern float __erfcf (float) throw ();
extern float lgammaf (float) throw (); extern float __lgammaf (float) throw ();




extern float tgammaf (float) throw (); extern float __tgammaf (float) throw ();





extern float gammaf (float) throw (); extern float __gammaf (float) throw ();







extern float lgammaf_r (float, int *__signgamp) throw (); extern float __lgammaf_r (float, int *__signgamp) throw ();






extern float rintf (float __x) throw (); extern float __rintf (float __x) throw ();


extern float nextafterf (float __x, float __y) throw (); extern float __nextafterf (float __x, float __y) throw ();

extern float nexttowardf (float __x, long double __y) throw (); extern float __nexttowardf (float __x, long double __y) throw ();




extern float nextdownf (float __x) throw (); extern float __nextdownf (float __x) throw ();

extern float nextupf (float __x) throw (); extern float __nextupf (float __x) throw ();



extern float remainderf (float __x, float __y) throw (); extern float __remainderf (float __x, float __y) throw ();



extern float scalbnf (float __x, int __n) throw (); extern float __scalbnf (float __x, int __n) throw ();



extern int ilogbf (float __x) throw (); extern int __ilogbf (float __x) throw ();




extern long int llogbf (float __x) throw (); extern long int __llogbf (float __x) throw ();




extern float scalblnf (float __x, long int __n) throw (); extern float __scalblnf (float __x, long int __n) throw ();



extern float nearbyintf (float __x) throw (); extern float __nearbyintf (float __x) throw ();



extern float roundf (float __x) throw () __attribute__ ((__const__)); extern float __roundf (float __x) throw () __attribute__ ((__const__));



extern float truncf (float __x) throw () __attribute__ ((__const__)); extern float __truncf (float __x) throw () __attribute__ ((__const__));




extern float remquof (float __x, float __y, int *__quo) throw (); extern float __remquof (float __x, float __y, int *__quo) throw ();






extern long int lrintf (float __x) throw (); extern long int __lrintf (float __x) throw ();
__extension__
extern long long int llrintf (float __x) throw (); extern long long int __llrintf (float __x) throw ();



extern long int lroundf (float __x) throw (); extern long int __lroundf (float __x) throw ();
__extension__
extern long long int llroundf (float __x) throw (); extern long long int __llroundf (float __x) throw ();



extern float fdimf (float __x, float __y) throw (); extern float __fdimf (float __x, float __y) throw ();


extern float fmaxf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fmaf (float __x, float __y, float __z) throw (); extern float __fmaf (float __x, float __y, float __z) throw ();




extern float roundevenf (float __x) throw () __attribute__ ((__const__)); extern float __roundevenf (float __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf (float __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf (float __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf (float __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf (float __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf (float __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf (float __x, int __round, unsigned int __width) throw ()
                               ;


extern float fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fmaxmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern float fminmagf (float __x, float __y) throw () __attribute__ ((__const__)); extern float __fminmagf (float __x, float __y) throw () __attribute__ ((__const__));


extern int canonicalizef (float *__cx, const float *__x) throw ();




extern int totalorderf (const float *__x, const float *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf (const float *__x, const float *__y) throw ()

     __attribute__ ((__pure__));


extern float getpayloadf (const float *__x) throw (); extern float __getpayloadf (const float *__x) throw ();


extern int setpayloadf (float *__x, float __payload) throw ();


extern int setpayloadsigf (float *__x, float __payload) throw ();







extern float scalbf (float __x, float __n) throw (); extern float __scalbf (float __x, float __n) throw ();
# 308 "/usr/include/math.h" 2 3 4
# 349 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyl (long double __value) throw ()
     __attribute__ ((__const__));


extern int __signbitl (long double __value) throw ()
     __attribute__ ((__const__));



extern int __isinfl (long double __value) throw () __attribute__ ((__const__));


extern int __finitel (long double __value) throw () __attribute__ ((__const__));


extern int __isnanl (long double __value) throw () __attribute__ ((__const__));


extern int __iseqsigl (long double __x, long double __y) throw ();


extern int __issignalingl (long double __value) throw ()
     __attribute__ ((__const__));
# 350 "/usr/include/math.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern long double acosl (long double __x) throw (); extern long double __acosl (long double __x) throw ();

extern long double asinl (long double __x) throw (); extern long double __asinl (long double __x) throw ();

extern long double atanl (long double __x) throw (); extern long double __atanl (long double __x) throw ();

extern long double atan2l (long double __y, long double __x) throw (); extern long double __atan2l (long double __y, long double __x) throw ();


 extern long double cosl (long double __x) throw (); extern long double __cosl (long double __x) throw ();

 extern long double sinl (long double __x) throw (); extern long double __sinl (long double __x) throw ();

extern long double tanl (long double __x) throw (); extern long double __tanl (long double __x) throw ();




extern long double coshl (long double __x) throw (); extern long double __coshl (long double __x) throw ();

extern long double sinhl (long double __x) throw (); extern long double __sinhl (long double __x) throw ();

extern long double tanhl (long double __x) throw (); extern long double __tanhl (long double __x) throw ();



 extern void sincosl (long double __x, long double *__sinx, long double *__cosx) throw (); extern void __sincosl (long double __x, long double *__sinx, long double *__cosx) throw ()
                                                        ;




extern long double acoshl (long double __x) throw (); extern long double __acoshl (long double __x) throw ();

extern long double asinhl (long double __x) throw (); extern long double __asinhl (long double __x) throw ();

extern long double atanhl (long double __x) throw (); extern long double __atanhl (long double __x) throw ();





 extern long double expl (long double __x) throw (); extern long double __expl (long double __x) throw ();


extern long double frexpl (long double __x, int *__exponent) throw (); extern long double __frexpl (long double __x, int *__exponent) throw ();


extern long double ldexpl (long double __x, int __exponent) throw (); extern long double __ldexpl (long double __x, int __exponent) throw ();


 extern long double logl (long double __x) throw (); extern long double __logl (long double __x) throw ();


extern long double log10l (long double __x) throw (); extern long double __log10l (long double __x) throw ();


extern long double modfl (long double __x, long double *__iptr) throw (); extern long double __modfl (long double __x, long double *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern long double exp10l (long double __x) throw (); extern long double __exp10l (long double __x) throw ();




extern long double expm1l (long double __x) throw (); extern long double __expm1l (long double __x) throw ();


extern long double log1pl (long double __x) throw (); extern long double __log1pl (long double __x) throw ();


extern long double logbl (long double __x) throw (); extern long double __logbl (long double __x) throw ();




extern long double exp2l (long double __x) throw (); extern long double __exp2l (long double __x) throw ();


extern long double log2l (long double __x) throw (); extern long double __log2l (long double __x) throw ();






 extern long double powl (long double __x, long double __y) throw (); extern long double __powl (long double __x, long double __y) throw ();


extern long double sqrtl (long double __x) throw (); extern long double __sqrtl (long double __x) throw ();



extern long double hypotl (long double __x, long double __y) throw (); extern long double __hypotl (long double __x, long double __y) throw ();




extern long double cbrtl (long double __x) throw (); extern long double __cbrtl (long double __x) throw ();






extern long double ceill (long double __x) throw () __attribute__ ((__const__)); extern long double __ceill (long double __x) throw () __attribute__ ((__const__));


extern long double fabsl (long double __x) throw () __attribute__ ((__const__)); extern long double __fabsl (long double __x) throw () __attribute__ ((__const__));


extern long double floorl (long double __x) throw () __attribute__ ((__const__)); extern long double __floorl (long double __x) throw () __attribute__ ((__const__));


extern long double fmodl (long double __x, long double __y) throw (); extern long double __fmodl (long double __x, long double __y) throw ();
# 177 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isinfl (long double __value) throw () __attribute__ ((__const__));




extern int finitel (long double __value) throw () __attribute__ ((__const__));


extern long double dreml (long double __x, long double __y) throw (); extern long double __dreml (long double __x, long double __y) throw ();



extern long double significandl (long double __x) throw (); extern long double __significandl (long double __x) throw ();






extern long double copysignl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __copysignl (long double __x, long double __y) throw () __attribute__ ((__const__));




extern long double nanl (const char *__tagb) throw (); extern long double __nanl (const char *__tagb) throw ();
# 211 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern int isnanl (long double __value) throw () __attribute__ ((__const__));





extern long double j0l (long double) throw (); extern long double __j0l (long double) throw ();
extern long double j1l (long double) throw (); extern long double __j1l (long double) throw ();
extern long double jnl (int, long double) throw (); extern long double __jnl (int, long double) throw ();
extern long double y0l (long double) throw (); extern long double __y0l (long double) throw ();
extern long double y1l (long double) throw (); extern long double __y1l (long double) throw ();
extern long double ynl (int, long double) throw (); extern long double __ynl (int, long double) throw ();





extern long double erfl (long double) throw (); extern long double __erfl (long double) throw ();
extern long double erfcl (long double) throw (); extern long double __erfcl (long double) throw ();
extern long double lgammal (long double) throw (); extern long double __lgammal (long double) throw ();




extern long double tgammal (long double) throw (); extern long double __tgammal (long double) throw ();





extern long double gammal (long double) throw (); extern long double __gammal (long double) throw ();







extern long double lgammal_r (long double, int *__signgamp) throw (); extern long double __lgammal_r (long double, int *__signgamp) throw ();






extern long double rintl (long double __x) throw (); extern long double __rintl (long double __x) throw ();


extern long double nextafterl (long double __x, long double __y) throw (); extern long double __nextafterl (long double __x, long double __y) throw ();

extern long double nexttowardl (long double __x, long double __y) throw (); extern long double __nexttowardl (long double __x, long double __y) throw ();




extern long double nextdownl (long double __x) throw (); extern long double __nextdownl (long double __x) throw ();

extern long double nextupl (long double __x) throw (); extern long double __nextupl (long double __x) throw ();



extern long double remainderl (long double __x, long double __y) throw (); extern long double __remainderl (long double __x, long double __y) throw ();



extern long double scalbnl (long double __x, int __n) throw (); extern long double __scalbnl (long double __x, int __n) throw ();



extern int ilogbl (long double __x) throw (); extern int __ilogbl (long double __x) throw ();




extern long int llogbl (long double __x) throw (); extern long int __llogbl (long double __x) throw ();




extern long double scalblnl (long double __x, long int __n) throw (); extern long double __scalblnl (long double __x, long int __n) throw ();



extern long double nearbyintl (long double __x) throw (); extern long double __nearbyintl (long double __x) throw ();



extern long double roundl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundl (long double __x) throw () __attribute__ ((__const__));



extern long double truncl (long double __x) throw () __attribute__ ((__const__)); extern long double __truncl (long double __x) throw () __attribute__ ((__const__));




extern long double remquol (long double __x, long double __y, int *__quo) throw (); extern long double __remquol (long double __x, long double __y, int *__quo) throw ();






extern long int lrintl (long double __x) throw (); extern long int __lrintl (long double __x) throw ();
__extension__
extern long long int llrintl (long double __x) throw (); extern long long int __llrintl (long double __x) throw ();



extern long int lroundl (long double __x) throw (); extern long int __lroundl (long double __x) throw ();
__extension__
extern long long int llroundl (long double __x) throw (); extern long long int __llroundl (long double __x) throw ();



extern long double fdiml (long double __x, long double __y) throw (); extern long double __fdiml (long double __x, long double __y) throw ();


extern long double fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fmal (long double __x, long double __y, long double __z) throw (); extern long double __fmal (long double __x, long double __y, long double __z) throw ();




extern long double roundevenl (long double __x) throw () __attribute__ ((__const__)); extern long double __roundevenl (long double __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpl (long double __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpl (long double __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxl (long double __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxl (long double __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxl (long double __x, int __round, unsigned int __width) throw ()
                               ;


extern long double fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fmaxmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern long double fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__)); extern long double __fminmagl (long double __x, long double __y) throw () __attribute__ ((__const__));


extern int canonicalizel (long double *__cx, const long double *__x) throw ();




extern int totalorderl (const long double *__x, const long double *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagl (const long double *__x, const long double *__y) throw ()

     __attribute__ ((__pure__));


extern long double getpayloadl (const long double *__x) throw (); extern long double __getpayloadl (const long double *__x) throw ();


extern int setpayloadl (long double *__x, long double __payload) throw ();


extern int setpayloadsigl (long double *__x, long double __payload) throw ();







extern long double scalbl (long double __x, long double __n) throw (); extern long double __scalbl (long double __x, long double __n) throw ();
# 351 "/usr/include/math.h" 2 3 4
# 389 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 acosf32 (_Float32 __x) throw (); extern _Float32 __acosf32 (_Float32 __x) throw ();

extern _Float32 asinf32 (_Float32 __x) throw (); extern _Float32 __asinf32 (_Float32 __x) throw ();

extern _Float32 atanf32 (_Float32 __x) throw (); extern _Float32 __atanf32 (_Float32 __x) throw ();

extern _Float32 atan2f32 (_Float32 __y, _Float32 __x) throw (); extern _Float32 __atan2f32 (_Float32 __y, _Float32 __x) throw ();


 extern _Float32 cosf32 (_Float32 __x) throw (); extern _Float32 __cosf32 (_Float32 __x) throw ();

 extern _Float32 sinf32 (_Float32 __x) throw (); extern _Float32 __sinf32 (_Float32 __x) throw ();

extern _Float32 tanf32 (_Float32 __x) throw (); extern _Float32 __tanf32 (_Float32 __x) throw ();




extern _Float32 coshf32 (_Float32 __x) throw (); extern _Float32 __coshf32 (_Float32 __x) throw ();

extern _Float32 sinhf32 (_Float32 __x) throw (); extern _Float32 __sinhf32 (_Float32 __x) throw ();

extern _Float32 tanhf32 (_Float32 __x) throw (); extern _Float32 __tanhf32 (_Float32 __x) throw ();



 extern void sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw (); extern void __sincosf32 (_Float32 __x, _Float32 *__sinx, _Float32 *__cosx) throw ()
                                                        ;




extern _Float32 acoshf32 (_Float32 __x) throw (); extern _Float32 __acoshf32 (_Float32 __x) throw ();

extern _Float32 asinhf32 (_Float32 __x) throw (); extern _Float32 __asinhf32 (_Float32 __x) throw ();

extern _Float32 atanhf32 (_Float32 __x) throw (); extern _Float32 __atanhf32 (_Float32 __x) throw ();





 extern _Float32 expf32 (_Float32 __x) throw (); extern _Float32 __expf32 (_Float32 __x) throw ();


extern _Float32 frexpf32 (_Float32 __x, int *__exponent) throw (); extern _Float32 __frexpf32 (_Float32 __x, int *__exponent) throw ();


extern _Float32 ldexpf32 (_Float32 __x, int __exponent) throw (); extern _Float32 __ldexpf32 (_Float32 __x, int __exponent) throw ();


 extern _Float32 logf32 (_Float32 __x) throw (); extern _Float32 __logf32 (_Float32 __x) throw ();


extern _Float32 log10f32 (_Float32 __x) throw (); extern _Float32 __log10f32 (_Float32 __x) throw ();


extern _Float32 modff32 (_Float32 __x, _Float32 *__iptr) throw (); extern _Float32 __modff32 (_Float32 __x, _Float32 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32 exp10f32 (_Float32 __x) throw (); extern _Float32 __exp10f32 (_Float32 __x) throw ();




extern _Float32 expm1f32 (_Float32 __x) throw (); extern _Float32 __expm1f32 (_Float32 __x) throw ();


extern _Float32 log1pf32 (_Float32 __x) throw (); extern _Float32 __log1pf32 (_Float32 __x) throw ();


extern _Float32 logbf32 (_Float32 __x) throw (); extern _Float32 __logbf32 (_Float32 __x) throw ();




extern _Float32 exp2f32 (_Float32 __x) throw (); extern _Float32 __exp2f32 (_Float32 __x) throw ();


extern _Float32 log2f32 (_Float32 __x) throw (); extern _Float32 __log2f32 (_Float32 __x) throw ();






 extern _Float32 powf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __powf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 sqrtf32 (_Float32 __x) throw (); extern _Float32 __sqrtf32 (_Float32 __x) throw ();



extern _Float32 hypotf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __hypotf32 (_Float32 __x, _Float32 __y) throw ();




extern _Float32 cbrtf32 (_Float32 __x) throw (); extern _Float32 __cbrtf32 (_Float32 __x) throw ();






extern _Float32 ceilf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __ceilf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fabsf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __fabsf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 floorf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __floorf32 (_Float32 __x) throw () __attribute__ ((__const__));


extern _Float32 fmodf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fmodf32 (_Float32 __x, _Float32 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __copysignf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));




extern _Float32 nanf32 (const char *__tagb) throw (); extern _Float32 __nanf32 (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 j0f32 (_Float32) throw (); extern _Float32 __j0f32 (_Float32) throw ();
extern _Float32 j1f32 (_Float32) throw (); extern _Float32 __j1f32 (_Float32) throw ();
extern _Float32 jnf32 (int, _Float32) throw (); extern _Float32 __jnf32 (int, _Float32) throw ();
extern _Float32 y0f32 (_Float32) throw (); extern _Float32 __y0f32 (_Float32) throw ();
extern _Float32 y1f32 (_Float32) throw (); extern _Float32 __y1f32 (_Float32) throw ();
extern _Float32 ynf32 (int, _Float32) throw (); extern _Float32 __ynf32 (int, _Float32) throw ();





extern _Float32 erff32 (_Float32) throw (); extern _Float32 __erff32 (_Float32) throw ();
extern _Float32 erfcf32 (_Float32) throw (); extern _Float32 __erfcf32 (_Float32) throw ();
extern _Float32 lgammaf32 (_Float32) throw (); extern _Float32 __lgammaf32 (_Float32) throw ();




extern _Float32 tgammaf32 (_Float32) throw (); extern _Float32 __tgammaf32 (_Float32) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32 lgammaf32_r (_Float32, int *__signgamp) throw (); extern _Float32 __lgammaf32_r (_Float32, int *__signgamp) throw ();






extern _Float32 rintf32 (_Float32 __x) throw (); extern _Float32 __rintf32 (_Float32 __x) throw ();


extern _Float32 nextafterf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __nextafterf32 (_Float32 __x, _Float32 __y) throw ();






extern _Float32 nextdownf32 (_Float32 __x) throw (); extern _Float32 __nextdownf32 (_Float32 __x) throw ();

extern _Float32 nextupf32 (_Float32 __x) throw (); extern _Float32 __nextupf32 (_Float32 __x) throw ();



extern _Float32 remainderf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __remainderf32 (_Float32 __x, _Float32 __y) throw ();



extern _Float32 scalbnf32 (_Float32 __x, int __n) throw (); extern _Float32 __scalbnf32 (_Float32 __x, int __n) throw ();



extern int ilogbf32 (_Float32 __x) throw (); extern int __ilogbf32 (_Float32 __x) throw ();




extern long int llogbf32 (_Float32 __x) throw (); extern long int __llogbf32 (_Float32 __x) throw ();




extern _Float32 scalblnf32 (_Float32 __x, long int __n) throw (); extern _Float32 __scalblnf32 (_Float32 __x, long int __n) throw ();



extern _Float32 nearbyintf32 (_Float32 __x) throw (); extern _Float32 __nearbyintf32 (_Float32 __x) throw ();



extern _Float32 roundf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern _Float32 truncf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __truncf32 (_Float32 __x) throw () __attribute__ ((__const__));




extern _Float32 remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw (); extern _Float32 __remquof32 (_Float32 __x, _Float32 __y, int *__quo) throw ();






extern long int lrintf32 (_Float32 __x) throw (); extern long int __lrintf32 (_Float32 __x) throw ();
__extension__
extern long long int llrintf32 (_Float32 __x) throw (); extern long long int __llrintf32 (_Float32 __x) throw ();



extern long int lroundf32 (_Float32 __x) throw (); extern long int __lroundf32 (_Float32 __x) throw ();
__extension__
extern long long int llroundf32 (_Float32 __x) throw (); extern long long int __llroundf32 (_Float32 __x) throw ();



extern _Float32 fdimf32 (_Float32 __x, _Float32 __y) throw (); extern _Float32 __fdimf32 (_Float32 __x, _Float32 __y) throw ();


extern _Float32 fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw (); extern _Float32 __fmaf32 (_Float32 __x, _Float32 __y, _Float32 __z) throw ();




extern _Float32 roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__)); extern _Float32 __roundevenf32 (_Float32 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32 (_Float32 __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float32 fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fmaxmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern _Float32 fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__)); extern _Float32 __fminmagf32 (_Float32 __x, _Float32 __y) throw () __attribute__ ((__const__));


extern int canonicalizef32 (_Float32 *__cx, const _Float32 *__x) throw ();




extern int totalorderf32 (const _Float32 *__x, const _Float32 *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf32 (const _Float32 *__x, const _Float32 *__y) throw ()

     __attribute__ ((__pure__));


extern _Float32 getpayloadf32 (const _Float32 *__x) throw (); extern _Float32 __getpayloadf32 (const _Float32 *__x) throw ();


extern int setpayloadf32 (_Float32 *__x, _Float32 __payload) throw ();


extern int setpayloadsigf32 (_Float32 *__x, _Float32 __payload) throw ();
# 390 "/usr/include/math.h" 2 3 4
# 406 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 acosf64 (_Float64 __x) throw (); extern _Float64 __acosf64 (_Float64 __x) throw ();

extern _Float64 asinf64 (_Float64 __x) throw (); extern _Float64 __asinf64 (_Float64 __x) throw ();

extern _Float64 atanf64 (_Float64 __x) throw (); extern _Float64 __atanf64 (_Float64 __x) throw ();

extern _Float64 atan2f64 (_Float64 __y, _Float64 __x) throw (); extern _Float64 __atan2f64 (_Float64 __y, _Float64 __x) throw ();


 extern _Float64 cosf64 (_Float64 __x) throw (); extern _Float64 __cosf64 (_Float64 __x) throw ();

 extern _Float64 sinf64 (_Float64 __x) throw (); extern _Float64 __sinf64 (_Float64 __x) throw ();

extern _Float64 tanf64 (_Float64 __x) throw (); extern _Float64 __tanf64 (_Float64 __x) throw ();




extern _Float64 coshf64 (_Float64 __x) throw (); extern _Float64 __coshf64 (_Float64 __x) throw ();

extern _Float64 sinhf64 (_Float64 __x) throw (); extern _Float64 __sinhf64 (_Float64 __x) throw ();

extern _Float64 tanhf64 (_Float64 __x) throw (); extern _Float64 __tanhf64 (_Float64 __x) throw ();



 extern void sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw (); extern void __sincosf64 (_Float64 __x, _Float64 *__sinx, _Float64 *__cosx) throw ()
                                                        ;




extern _Float64 acoshf64 (_Float64 __x) throw (); extern _Float64 __acoshf64 (_Float64 __x) throw ();

extern _Float64 asinhf64 (_Float64 __x) throw (); extern _Float64 __asinhf64 (_Float64 __x) throw ();

extern _Float64 atanhf64 (_Float64 __x) throw (); extern _Float64 __atanhf64 (_Float64 __x) throw ();





 extern _Float64 expf64 (_Float64 __x) throw (); extern _Float64 __expf64 (_Float64 __x) throw ();


extern _Float64 frexpf64 (_Float64 __x, int *__exponent) throw (); extern _Float64 __frexpf64 (_Float64 __x, int *__exponent) throw ();


extern _Float64 ldexpf64 (_Float64 __x, int __exponent) throw (); extern _Float64 __ldexpf64 (_Float64 __x, int __exponent) throw ();


 extern _Float64 logf64 (_Float64 __x) throw (); extern _Float64 __logf64 (_Float64 __x) throw ();


extern _Float64 log10f64 (_Float64 __x) throw (); extern _Float64 __log10f64 (_Float64 __x) throw ();


extern _Float64 modff64 (_Float64 __x, _Float64 *__iptr) throw (); extern _Float64 __modff64 (_Float64 __x, _Float64 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64 exp10f64 (_Float64 __x) throw (); extern _Float64 __exp10f64 (_Float64 __x) throw ();




extern _Float64 expm1f64 (_Float64 __x) throw (); extern _Float64 __expm1f64 (_Float64 __x) throw ();


extern _Float64 log1pf64 (_Float64 __x) throw (); extern _Float64 __log1pf64 (_Float64 __x) throw ();


extern _Float64 logbf64 (_Float64 __x) throw (); extern _Float64 __logbf64 (_Float64 __x) throw ();




extern _Float64 exp2f64 (_Float64 __x) throw (); extern _Float64 __exp2f64 (_Float64 __x) throw ();


extern _Float64 log2f64 (_Float64 __x) throw (); extern _Float64 __log2f64 (_Float64 __x) throw ();






 extern _Float64 powf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __powf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 sqrtf64 (_Float64 __x) throw (); extern _Float64 __sqrtf64 (_Float64 __x) throw ();



extern _Float64 hypotf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __hypotf64 (_Float64 __x, _Float64 __y) throw ();




extern _Float64 cbrtf64 (_Float64 __x) throw (); extern _Float64 __cbrtf64 (_Float64 __x) throw ();






extern _Float64 ceilf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __ceilf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fabsf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __fabsf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 floorf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __floorf64 (_Float64 __x) throw () __attribute__ ((__const__));


extern _Float64 fmodf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fmodf64 (_Float64 __x, _Float64 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __copysignf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));




extern _Float64 nanf64 (const char *__tagb) throw (); extern _Float64 __nanf64 (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 j0f64 (_Float64) throw (); extern _Float64 __j0f64 (_Float64) throw ();
extern _Float64 j1f64 (_Float64) throw (); extern _Float64 __j1f64 (_Float64) throw ();
extern _Float64 jnf64 (int, _Float64) throw (); extern _Float64 __jnf64 (int, _Float64) throw ();
extern _Float64 y0f64 (_Float64) throw (); extern _Float64 __y0f64 (_Float64) throw ();
extern _Float64 y1f64 (_Float64) throw (); extern _Float64 __y1f64 (_Float64) throw ();
extern _Float64 ynf64 (int, _Float64) throw (); extern _Float64 __ynf64 (int, _Float64) throw ();





extern _Float64 erff64 (_Float64) throw (); extern _Float64 __erff64 (_Float64) throw ();
extern _Float64 erfcf64 (_Float64) throw (); extern _Float64 __erfcf64 (_Float64) throw ();
extern _Float64 lgammaf64 (_Float64) throw (); extern _Float64 __lgammaf64 (_Float64) throw ();




extern _Float64 tgammaf64 (_Float64) throw (); extern _Float64 __tgammaf64 (_Float64) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64 lgammaf64_r (_Float64, int *__signgamp) throw (); extern _Float64 __lgammaf64_r (_Float64, int *__signgamp) throw ();






extern _Float64 rintf64 (_Float64 __x) throw (); extern _Float64 __rintf64 (_Float64 __x) throw ();


extern _Float64 nextafterf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __nextafterf64 (_Float64 __x, _Float64 __y) throw ();






extern _Float64 nextdownf64 (_Float64 __x) throw (); extern _Float64 __nextdownf64 (_Float64 __x) throw ();

extern _Float64 nextupf64 (_Float64 __x) throw (); extern _Float64 __nextupf64 (_Float64 __x) throw ();



extern _Float64 remainderf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __remainderf64 (_Float64 __x, _Float64 __y) throw ();



extern _Float64 scalbnf64 (_Float64 __x, int __n) throw (); extern _Float64 __scalbnf64 (_Float64 __x, int __n) throw ();



extern int ilogbf64 (_Float64 __x) throw (); extern int __ilogbf64 (_Float64 __x) throw ();




extern long int llogbf64 (_Float64 __x) throw (); extern long int __llogbf64 (_Float64 __x) throw ();




extern _Float64 scalblnf64 (_Float64 __x, long int __n) throw (); extern _Float64 __scalblnf64 (_Float64 __x, long int __n) throw ();



extern _Float64 nearbyintf64 (_Float64 __x) throw (); extern _Float64 __nearbyintf64 (_Float64 __x) throw ();



extern _Float64 roundf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern _Float64 truncf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __truncf64 (_Float64 __x) throw () __attribute__ ((__const__));




extern _Float64 remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw (); extern _Float64 __remquof64 (_Float64 __x, _Float64 __y, int *__quo) throw ();






extern long int lrintf64 (_Float64 __x) throw (); extern long int __lrintf64 (_Float64 __x) throw ();
__extension__
extern long long int llrintf64 (_Float64 __x) throw (); extern long long int __llrintf64 (_Float64 __x) throw ();



extern long int lroundf64 (_Float64 __x) throw (); extern long int __lroundf64 (_Float64 __x) throw ();
__extension__
extern long long int llroundf64 (_Float64 __x) throw (); extern long long int __llroundf64 (_Float64 __x) throw ();



extern _Float64 fdimf64 (_Float64 __x, _Float64 __y) throw (); extern _Float64 __fdimf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float64 fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw (); extern _Float64 __fmaf64 (_Float64 __x, _Float64 __y, _Float64 __z) throw ();




extern _Float64 roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__)); extern _Float64 __roundevenf64 (_Float64 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64 (_Float64 __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float64 fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fmaxmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern _Float64 fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__)); extern _Float64 __fminmagf64 (_Float64 __x, _Float64 __y) throw () __attribute__ ((__const__));


extern int canonicalizef64 (_Float64 *__cx, const _Float64 *__x) throw ();




extern int totalorderf64 (const _Float64 *__x, const _Float64 *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf64 (const _Float64 *__x, const _Float64 *__y) throw ()

     __attribute__ ((__pure__));


extern _Float64 getpayloadf64 (const _Float64 *__x) throw (); extern _Float64 __getpayloadf64 (const _Float64 *__x) throw ();


extern int setpayloadf64 (_Float64 *__x, _Float64 __payload) throw ();


extern int setpayloadsigf64 (_Float64 *__x, _Float64 __payload) throw ();
# 407 "/usr/include/math.h" 2 3 4
# 420 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/mathcalls-helper-functions.h" 3 4
extern int __fpclassifyf128 (_Float128 __value) throw ()
     __attribute__ ((__const__));


extern int __signbitf128 (_Float128 __value) throw ()
     __attribute__ ((__const__));



extern int __isinff128 (_Float128 __value) throw () __attribute__ ((__const__));


extern int __finitef128 (_Float128 __value) throw () __attribute__ ((__const__));


extern int __isnanf128 (_Float128 __value) throw () __attribute__ ((__const__));


extern int __iseqsigf128 (_Float128 __x, _Float128 __y) throw ();


extern int __issignalingf128 (_Float128 __value) throw ()
     __attribute__ ((__const__));
# 421 "/usr/include/math.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 acosf128 (_Float128 __x) throw (); extern _Float128 __acosf128 (_Float128 __x) throw ();

extern _Float128 asinf128 (_Float128 __x) throw (); extern _Float128 __asinf128 (_Float128 __x) throw ();

extern _Float128 atanf128 (_Float128 __x) throw (); extern _Float128 __atanf128 (_Float128 __x) throw ();

extern _Float128 atan2f128 (_Float128 __y, _Float128 __x) throw (); extern _Float128 __atan2f128 (_Float128 __y, _Float128 __x) throw ();


 extern _Float128 cosf128 (_Float128 __x) throw (); extern _Float128 __cosf128 (_Float128 __x) throw ();

 extern _Float128 sinf128 (_Float128 __x) throw (); extern _Float128 __sinf128 (_Float128 __x) throw ();

extern _Float128 tanf128 (_Float128 __x) throw (); extern _Float128 __tanf128 (_Float128 __x) throw ();




extern _Float128 coshf128 (_Float128 __x) throw (); extern _Float128 __coshf128 (_Float128 __x) throw ();

extern _Float128 sinhf128 (_Float128 __x) throw (); extern _Float128 __sinhf128 (_Float128 __x) throw ();

extern _Float128 tanhf128 (_Float128 __x) throw (); extern _Float128 __tanhf128 (_Float128 __x) throw ();



 extern void sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) throw (); extern void __sincosf128 (_Float128 __x, _Float128 *__sinx, _Float128 *__cosx) throw ()
                                                        ;




extern _Float128 acoshf128 (_Float128 __x) throw (); extern _Float128 __acoshf128 (_Float128 __x) throw ();

extern _Float128 asinhf128 (_Float128 __x) throw (); extern _Float128 __asinhf128 (_Float128 __x) throw ();

extern _Float128 atanhf128 (_Float128 __x) throw (); extern _Float128 __atanhf128 (_Float128 __x) throw ();





 extern _Float128 expf128 (_Float128 __x) throw (); extern _Float128 __expf128 (_Float128 __x) throw ();


extern _Float128 frexpf128 (_Float128 __x, int *__exponent) throw (); extern _Float128 __frexpf128 (_Float128 __x, int *__exponent) throw ();


extern _Float128 ldexpf128 (_Float128 __x, int __exponent) throw (); extern _Float128 __ldexpf128 (_Float128 __x, int __exponent) throw ();


 extern _Float128 logf128 (_Float128 __x) throw (); extern _Float128 __logf128 (_Float128 __x) throw ();


extern _Float128 log10f128 (_Float128 __x) throw (); extern _Float128 __log10f128 (_Float128 __x) throw ();


extern _Float128 modff128 (_Float128 __x, _Float128 *__iptr) throw (); extern _Float128 __modff128 (_Float128 __x, _Float128 *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float128 exp10f128 (_Float128 __x) throw (); extern _Float128 __exp10f128 (_Float128 __x) throw ();




extern _Float128 expm1f128 (_Float128 __x) throw (); extern _Float128 __expm1f128 (_Float128 __x) throw ();


extern _Float128 log1pf128 (_Float128 __x) throw (); extern _Float128 __log1pf128 (_Float128 __x) throw ();


extern _Float128 logbf128 (_Float128 __x) throw (); extern _Float128 __logbf128 (_Float128 __x) throw ();




extern _Float128 exp2f128 (_Float128 __x) throw (); extern _Float128 __exp2f128 (_Float128 __x) throw ();


extern _Float128 log2f128 (_Float128 __x) throw (); extern _Float128 __log2f128 (_Float128 __x) throw ();






 extern _Float128 powf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __powf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float128 sqrtf128 (_Float128 __x) throw (); extern _Float128 __sqrtf128 (_Float128 __x) throw ();



extern _Float128 hypotf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __hypotf128 (_Float128 __x, _Float128 __y) throw ();




extern _Float128 cbrtf128 (_Float128 __x) throw (); extern _Float128 __cbrtf128 (_Float128 __x) throw ();






extern _Float128 ceilf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __ceilf128 (_Float128 __x) throw () __attribute__ ((__const__));


extern _Float128 fabsf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __fabsf128 (_Float128 __x) throw () __attribute__ ((__const__));


extern _Float128 floorf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __floorf128 (_Float128 __x) throw () __attribute__ ((__const__));


extern _Float128 fmodf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __fmodf128 (_Float128 __x, _Float128 __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 copysignf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __copysignf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));




extern _Float128 nanf128 (const char *__tagb) throw (); extern _Float128 __nanf128 (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 j0f128 (_Float128) throw (); extern _Float128 __j0f128 (_Float128) throw ();
extern _Float128 j1f128 (_Float128) throw (); extern _Float128 __j1f128 (_Float128) throw ();
extern _Float128 jnf128 (int, _Float128) throw (); extern _Float128 __jnf128 (int, _Float128) throw ();
extern _Float128 y0f128 (_Float128) throw (); extern _Float128 __y0f128 (_Float128) throw ();
extern _Float128 y1f128 (_Float128) throw (); extern _Float128 __y1f128 (_Float128) throw ();
extern _Float128 ynf128 (int, _Float128) throw (); extern _Float128 __ynf128 (int, _Float128) throw ();





extern _Float128 erff128 (_Float128) throw (); extern _Float128 __erff128 (_Float128) throw ();
extern _Float128 erfcf128 (_Float128) throw (); extern _Float128 __erfcf128 (_Float128) throw ();
extern _Float128 lgammaf128 (_Float128) throw (); extern _Float128 __lgammaf128 (_Float128) throw ();




extern _Float128 tgammaf128 (_Float128) throw (); extern _Float128 __tgammaf128 (_Float128) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float128 lgammaf128_r (_Float128, int *__signgamp) throw (); extern _Float128 __lgammaf128_r (_Float128, int *__signgamp) throw ();






extern _Float128 rintf128 (_Float128 __x) throw (); extern _Float128 __rintf128 (_Float128 __x) throw ();


extern _Float128 nextafterf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __nextafterf128 (_Float128 __x, _Float128 __y) throw ();






extern _Float128 nextdownf128 (_Float128 __x) throw (); extern _Float128 __nextdownf128 (_Float128 __x) throw ();

extern _Float128 nextupf128 (_Float128 __x) throw (); extern _Float128 __nextupf128 (_Float128 __x) throw ();



extern _Float128 remainderf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __remainderf128 (_Float128 __x, _Float128 __y) throw ();



extern _Float128 scalbnf128 (_Float128 __x, int __n) throw (); extern _Float128 __scalbnf128 (_Float128 __x, int __n) throw ();



extern int ilogbf128 (_Float128 __x) throw (); extern int __ilogbf128 (_Float128 __x) throw ();




extern long int llogbf128 (_Float128 __x) throw (); extern long int __llogbf128 (_Float128 __x) throw ();




extern _Float128 scalblnf128 (_Float128 __x, long int __n) throw (); extern _Float128 __scalblnf128 (_Float128 __x, long int __n) throw ();



extern _Float128 nearbyintf128 (_Float128 __x) throw (); extern _Float128 __nearbyintf128 (_Float128 __x) throw ();



extern _Float128 roundf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __roundf128 (_Float128 __x) throw () __attribute__ ((__const__));



extern _Float128 truncf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __truncf128 (_Float128 __x) throw () __attribute__ ((__const__));




extern _Float128 remquof128 (_Float128 __x, _Float128 __y, int *__quo) throw (); extern _Float128 __remquof128 (_Float128 __x, _Float128 __y, int *__quo) throw ();






extern long int lrintf128 (_Float128 __x) throw (); extern long int __lrintf128 (_Float128 __x) throw ();
__extension__
extern long long int llrintf128 (_Float128 __x) throw (); extern long long int __llrintf128 (_Float128 __x) throw ();



extern long int lroundf128 (_Float128 __x) throw (); extern long int __lroundf128 (_Float128 __x) throw ();
__extension__
extern long long int llroundf128 (_Float128 __x) throw (); extern long long int __llroundf128 (_Float128 __x) throw ();



extern _Float128 fdimf128 (_Float128 __x, _Float128 __y) throw (); extern _Float128 __fdimf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float128 fmaxf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fmaxf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern _Float128 fminf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fminf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern _Float128 fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) throw (); extern _Float128 __fmaf128 (_Float128 __x, _Float128 __y, _Float128 __z) throw ();




extern _Float128 roundevenf128 (_Float128 __x) throw () __attribute__ ((__const__)); extern _Float128 __roundevenf128 (_Float128 __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf128 (_Float128 __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float128 fmaxmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fmaxmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern _Float128 fminmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__)); extern _Float128 __fminmagf128 (_Float128 __x, _Float128 __y) throw () __attribute__ ((__const__));


extern int canonicalizef128 (_Float128 *__cx, const _Float128 *__x) throw ();




extern int totalorderf128 (const _Float128 *__x, const _Float128 *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf128 (const _Float128 *__x, const _Float128 *__y) throw ()

     __attribute__ ((__pure__));


extern _Float128 getpayloadf128 (const _Float128 *__x) throw (); extern _Float128 __getpayloadf128 (const _Float128 *__x) throw ();


extern int setpayloadf128 (_Float128 *__x, _Float128 __payload) throw ();


extern int setpayloadsigf128 (_Float128 *__x, _Float128 __payload) throw ();
# 424 "/usr/include/math.h" 2 3 4
# 440 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x acosf32x (_Float32x __x) throw (); extern _Float32x __acosf32x (_Float32x __x) throw ();

extern _Float32x asinf32x (_Float32x __x) throw (); extern _Float32x __asinf32x (_Float32x __x) throw ();

extern _Float32x atanf32x (_Float32x __x) throw (); extern _Float32x __atanf32x (_Float32x __x) throw ();

extern _Float32x atan2f32x (_Float32x __y, _Float32x __x) throw (); extern _Float32x __atan2f32x (_Float32x __y, _Float32x __x) throw ();


 extern _Float32x cosf32x (_Float32x __x) throw (); extern _Float32x __cosf32x (_Float32x __x) throw ();

 extern _Float32x sinf32x (_Float32x __x) throw (); extern _Float32x __sinf32x (_Float32x __x) throw ();

extern _Float32x tanf32x (_Float32x __x) throw (); extern _Float32x __tanf32x (_Float32x __x) throw ();




extern _Float32x coshf32x (_Float32x __x) throw (); extern _Float32x __coshf32x (_Float32x __x) throw ();

extern _Float32x sinhf32x (_Float32x __x) throw (); extern _Float32x __sinhf32x (_Float32x __x) throw ();

extern _Float32x tanhf32x (_Float32x __x) throw (); extern _Float32x __tanhf32x (_Float32x __x) throw ();



 extern void sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw (); extern void __sincosf32x (_Float32x __x, _Float32x *__sinx, _Float32x *__cosx) throw ()
                                                        ;




extern _Float32x acoshf32x (_Float32x __x) throw (); extern _Float32x __acoshf32x (_Float32x __x) throw ();

extern _Float32x asinhf32x (_Float32x __x) throw (); extern _Float32x __asinhf32x (_Float32x __x) throw ();

extern _Float32x atanhf32x (_Float32x __x) throw (); extern _Float32x __atanhf32x (_Float32x __x) throw ();





 extern _Float32x expf32x (_Float32x __x) throw (); extern _Float32x __expf32x (_Float32x __x) throw ();


extern _Float32x frexpf32x (_Float32x __x, int *__exponent) throw (); extern _Float32x __frexpf32x (_Float32x __x, int *__exponent) throw ();


extern _Float32x ldexpf32x (_Float32x __x, int __exponent) throw (); extern _Float32x __ldexpf32x (_Float32x __x, int __exponent) throw ();


 extern _Float32x logf32x (_Float32x __x) throw (); extern _Float32x __logf32x (_Float32x __x) throw ();


extern _Float32x log10f32x (_Float32x __x) throw (); extern _Float32x __log10f32x (_Float32x __x) throw ();


extern _Float32x modff32x (_Float32x __x, _Float32x *__iptr) throw (); extern _Float32x __modff32x (_Float32x __x, _Float32x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float32x exp10f32x (_Float32x __x) throw (); extern _Float32x __exp10f32x (_Float32x __x) throw ();




extern _Float32x expm1f32x (_Float32x __x) throw (); extern _Float32x __expm1f32x (_Float32x __x) throw ();


extern _Float32x log1pf32x (_Float32x __x) throw (); extern _Float32x __log1pf32x (_Float32x __x) throw ();


extern _Float32x logbf32x (_Float32x __x) throw (); extern _Float32x __logbf32x (_Float32x __x) throw ();




extern _Float32x exp2f32x (_Float32x __x) throw (); extern _Float32x __exp2f32x (_Float32x __x) throw ();


extern _Float32x log2f32x (_Float32x __x) throw (); extern _Float32x __log2f32x (_Float32x __x) throw ();






 extern _Float32x powf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __powf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x sqrtf32x (_Float32x __x) throw (); extern _Float32x __sqrtf32x (_Float32x __x) throw ();



extern _Float32x hypotf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __hypotf32x (_Float32x __x, _Float32x __y) throw ();




extern _Float32x cbrtf32x (_Float32x __x) throw (); extern _Float32x __cbrtf32x (_Float32x __x) throw ();






extern _Float32x ceilf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __ceilf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fabsf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __fabsf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x floorf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __floorf32x (_Float32x __x) throw () __attribute__ ((__const__));


extern _Float32x fmodf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fmodf32x (_Float32x __x, _Float32x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __copysignf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));




extern _Float32x nanf32x (const char *__tagb) throw (); extern _Float32x __nanf32x (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x j0f32x (_Float32x) throw (); extern _Float32x __j0f32x (_Float32x) throw ();
extern _Float32x j1f32x (_Float32x) throw (); extern _Float32x __j1f32x (_Float32x) throw ();
extern _Float32x jnf32x (int, _Float32x) throw (); extern _Float32x __jnf32x (int, _Float32x) throw ();
extern _Float32x y0f32x (_Float32x) throw (); extern _Float32x __y0f32x (_Float32x) throw ();
extern _Float32x y1f32x (_Float32x) throw (); extern _Float32x __y1f32x (_Float32x) throw ();
extern _Float32x ynf32x (int, _Float32x) throw (); extern _Float32x __ynf32x (int, _Float32x) throw ();





extern _Float32x erff32x (_Float32x) throw (); extern _Float32x __erff32x (_Float32x) throw ();
extern _Float32x erfcf32x (_Float32x) throw (); extern _Float32x __erfcf32x (_Float32x) throw ();
extern _Float32x lgammaf32x (_Float32x) throw (); extern _Float32x __lgammaf32x (_Float32x) throw ();




extern _Float32x tgammaf32x (_Float32x) throw (); extern _Float32x __tgammaf32x (_Float32x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float32x lgammaf32x_r (_Float32x, int *__signgamp) throw (); extern _Float32x __lgammaf32x_r (_Float32x, int *__signgamp) throw ();






extern _Float32x rintf32x (_Float32x __x) throw (); extern _Float32x __rintf32x (_Float32x __x) throw ();


extern _Float32x nextafterf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __nextafterf32x (_Float32x __x, _Float32x __y) throw ();






extern _Float32x nextdownf32x (_Float32x __x) throw (); extern _Float32x __nextdownf32x (_Float32x __x) throw ();

extern _Float32x nextupf32x (_Float32x __x) throw (); extern _Float32x __nextupf32x (_Float32x __x) throw ();



extern _Float32x remainderf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __remainderf32x (_Float32x __x, _Float32x __y) throw ();



extern _Float32x scalbnf32x (_Float32x __x, int __n) throw (); extern _Float32x __scalbnf32x (_Float32x __x, int __n) throw ();



extern int ilogbf32x (_Float32x __x) throw (); extern int __ilogbf32x (_Float32x __x) throw ();




extern long int llogbf32x (_Float32x __x) throw (); extern long int __llogbf32x (_Float32x __x) throw ();




extern _Float32x scalblnf32x (_Float32x __x, long int __n) throw (); extern _Float32x __scalblnf32x (_Float32x __x, long int __n) throw ();



extern _Float32x nearbyintf32x (_Float32x __x) throw (); extern _Float32x __nearbyintf32x (_Float32x __x) throw ();



extern _Float32x roundf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern _Float32x truncf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __truncf32x (_Float32x __x) throw () __attribute__ ((__const__));




extern _Float32x remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw (); extern _Float32x __remquof32x (_Float32x __x, _Float32x __y, int *__quo) throw ();






extern long int lrintf32x (_Float32x __x) throw (); extern long int __lrintf32x (_Float32x __x) throw ();
__extension__
extern long long int llrintf32x (_Float32x __x) throw (); extern long long int __llrintf32x (_Float32x __x) throw ();



extern long int lroundf32x (_Float32x __x) throw (); extern long int __lroundf32x (_Float32x __x) throw ();
__extension__
extern long long int llroundf32x (_Float32x __x) throw (); extern long long int __llroundf32x (_Float32x __x) throw ();



extern _Float32x fdimf32x (_Float32x __x, _Float32x __y) throw (); extern _Float32x __fdimf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32x fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw (); extern _Float32x __fmaf32x (_Float32x __x, _Float32x __y, _Float32x __z) throw ();




extern _Float32x roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__)); extern _Float32x __roundevenf32x (_Float32x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf32x (_Float32x __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float32x fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fmaxmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern _Float32x fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__)); extern _Float32x __fminmagf32x (_Float32x __x, _Float32x __y) throw () __attribute__ ((__const__));


extern int canonicalizef32x (_Float32x *__cx, const _Float32x *__x) throw ();




extern int totalorderf32x (const _Float32x *__x, const _Float32x *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf32x (const _Float32x *__x, const _Float32x *__y) throw ()

     __attribute__ ((__pure__));


extern _Float32x getpayloadf32x (const _Float32x *__x) throw (); extern _Float32x __getpayloadf32x (const _Float32x *__x) throw ();


extern int setpayloadf32x (_Float32x *__x, _Float32x __payload) throw ();


extern int setpayloadsigf32x (_Float32x *__x, _Float32x __payload) throw ();
# 441 "/usr/include/math.h" 2 3 4
# 457 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 1 3 4
# 53 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x acosf64x (_Float64x __x) throw (); extern _Float64x __acosf64x (_Float64x __x) throw ();

extern _Float64x asinf64x (_Float64x __x) throw (); extern _Float64x __asinf64x (_Float64x __x) throw ();

extern _Float64x atanf64x (_Float64x __x) throw (); extern _Float64x __atanf64x (_Float64x __x) throw ();

extern _Float64x atan2f64x (_Float64x __y, _Float64x __x) throw (); extern _Float64x __atan2f64x (_Float64x __y, _Float64x __x) throw ();


 extern _Float64x cosf64x (_Float64x __x) throw (); extern _Float64x __cosf64x (_Float64x __x) throw ();

 extern _Float64x sinf64x (_Float64x __x) throw (); extern _Float64x __sinf64x (_Float64x __x) throw ();

extern _Float64x tanf64x (_Float64x __x) throw (); extern _Float64x __tanf64x (_Float64x __x) throw ();




extern _Float64x coshf64x (_Float64x __x) throw (); extern _Float64x __coshf64x (_Float64x __x) throw ();

extern _Float64x sinhf64x (_Float64x __x) throw (); extern _Float64x __sinhf64x (_Float64x __x) throw ();

extern _Float64x tanhf64x (_Float64x __x) throw (); extern _Float64x __tanhf64x (_Float64x __x) throw ();



 extern void sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw (); extern void __sincosf64x (_Float64x __x, _Float64x *__sinx, _Float64x *__cosx) throw ()
                                                        ;




extern _Float64x acoshf64x (_Float64x __x) throw (); extern _Float64x __acoshf64x (_Float64x __x) throw ();

extern _Float64x asinhf64x (_Float64x __x) throw (); extern _Float64x __asinhf64x (_Float64x __x) throw ();

extern _Float64x atanhf64x (_Float64x __x) throw (); extern _Float64x __atanhf64x (_Float64x __x) throw ();





 extern _Float64x expf64x (_Float64x __x) throw (); extern _Float64x __expf64x (_Float64x __x) throw ();


extern _Float64x frexpf64x (_Float64x __x, int *__exponent) throw (); extern _Float64x __frexpf64x (_Float64x __x, int *__exponent) throw ();


extern _Float64x ldexpf64x (_Float64x __x, int __exponent) throw (); extern _Float64x __ldexpf64x (_Float64x __x, int __exponent) throw ();


 extern _Float64x logf64x (_Float64x __x) throw (); extern _Float64x __logf64x (_Float64x __x) throw ();


extern _Float64x log10f64x (_Float64x __x) throw (); extern _Float64x __log10f64x (_Float64x __x) throw ();


extern _Float64x modff64x (_Float64x __x, _Float64x *__iptr) throw (); extern _Float64x __modff64x (_Float64x __x, _Float64x *__iptr) throw () __attribute__ ((__nonnull__ (2)));



extern _Float64x exp10f64x (_Float64x __x) throw (); extern _Float64x __exp10f64x (_Float64x __x) throw ();




extern _Float64x expm1f64x (_Float64x __x) throw (); extern _Float64x __expm1f64x (_Float64x __x) throw ();


extern _Float64x log1pf64x (_Float64x __x) throw (); extern _Float64x __log1pf64x (_Float64x __x) throw ();


extern _Float64x logbf64x (_Float64x __x) throw (); extern _Float64x __logbf64x (_Float64x __x) throw ();




extern _Float64x exp2f64x (_Float64x __x) throw (); extern _Float64x __exp2f64x (_Float64x __x) throw ();


extern _Float64x log2f64x (_Float64x __x) throw (); extern _Float64x __log2f64x (_Float64x __x) throw ();






 extern _Float64x powf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __powf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x sqrtf64x (_Float64x __x) throw (); extern _Float64x __sqrtf64x (_Float64x __x) throw ();



extern _Float64x hypotf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __hypotf64x (_Float64x __x, _Float64x __y) throw ();




extern _Float64x cbrtf64x (_Float64x __x) throw (); extern _Float64x __cbrtf64x (_Float64x __x) throw ();






extern _Float64x ceilf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __ceilf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fabsf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __fabsf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x floorf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __floorf64x (_Float64x __x) throw () __attribute__ ((__const__));


extern _Float64x fmodf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fmodf64x (_Float64x __x, _Float64x __y) throw ();
# 196 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __copysignf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));




extern _Float64x nanf64x (const char *__tagb) throw (); extern _Float64x __nanf64x (const char *__tagb) throw ();
# 217 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x j0f64x (_Float64x) throw (); extern _Float64x __j0f64x (_Float64x) throw ();
extern _Float64x j1f64x (_Float64x) throw (); extern _Float64x __j1f64x (_Float64x) throw ();
extern _Float64x jnf64x (int, _Float64x) throw (); extern _Float64x __jnf64x (int, _Float64x) throw ();
extern _Float64x y0f64x (_Float64x) throw (); extern _Float64x __y0f64x (_Float64x) throw ();
extern _Float64x y1f64x (_Float64x) throw (); extern _Float64x __y1f64x (_Float64x) throw ();
extern _Float64x ynf64x (int, _Float64x) throw (); extern _Float64x __ynf64x (int, _Float64x) throw ();





extern _Float64x erff64x (_Float64x) throw (); extern _Float64x __erff64x (_Float64x) throw ();
extern _Float64x erfcf64x (_Float64x) throw (); extern _Float64x __erfcf64x (_Float64x) throw ();
extern _Float64x lgammaf64x (_Float64x) throw (); extern _Float64x __lgammaf64x (_Float64x) throw ();




extern _Float64x tgammaf64x (_Float64x) throw (); extern _Float64x __tgammaf64x (_Float64x) throw ();
# 249 "/usr/include/x86_64-linux-gnu/bits/mathcalls.h" 3 4
extern _Float64x lgammaf64x_r (_Float64x, int *__signgamp) throw (); extern _Float64x __lgammaf64x_r (_Float64x, int *__signgamp) throw ();






extern _Float64x rintf64x (_Float64x __x) throw (); extern _Float64x __rintf64x (_Float64x __x) throw ();


extern _Float64x nextafterf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __nextafterf64x (_Float64x __x, _Float64x __y) throw ();






extern _Float64x nextdownf64x (_Float64x __x) throw (); extern _Float64x __nextdownf64x (_Float64x __x) throw ();

extern _Float64x nextupf64x (_Float64x __x) throw (); extern _Float64x __nextupf64x (_Float64x __x) throw ();



extern _Float64x remainderf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __remainderf64x (_Float64x __x, _Float64x __y) throw ();



extern _Float64x scalbnf64x (_Float64x __x, int __n) throw (); extern _Float64x __scalbnf64x (_Float64x __x, int __n) throw ();



extern int ilogbf64x (_Float64x __x) throw (); extern int __ilogbf64x (_Float64x __x) throw ();




extern long int llogbf64x (_Float64x __x) throw (); extern long int __llogbf64x (_Float64x __x) throw ();




extern _Float64x scalblnf64x (_Float64x __x, long int __n) throw (); extern _Float64x __scalblnf64x (_Float64x __x, long int __n) throw ();



extern _Float64x nearbyintf64x (_Float64x __x) throw (); extern _Float64x __nearbyintf64x (_Float64x __x) throw ();



extern _Float64x roundf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern _Float64x truncf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __truncf64x (_Float64x __x) throw () __attribute__ ((__const__));




extern _Float64x remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw (); extern _Float64x __remquof64x (_Float64x __x, _Float64x __y, int *__quo) throw ();






extern long int lrintf64x (_Float64x __x) throw (); extern long int __lrintf64x (_Float64x __x) throw ();
__extension__
extern long long int llrintf64x (_Float64x __x) throw (); extern long long int __llrintf64x (_Float64x __x) throw ();



extern long int lroundf64x (_Float64x __x) throw (); extern long int __lroundf64x (_Float64x __x) throw ();
__extension__
extern long long int llroundf64x (_Float64x __x) throw (); extern long long int __llroundf64x (_Float64x __x) throw ();



extern _Float64x fdimf64x (_Float64x __x, _Float64x __y) throw (); extern _Float64x __fdimf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64x fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw (); extern _Float64x __fmaf64x (_Float64x __x, _Float64x __y, _Float64x __z) throw ();




extern _Float64x roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__)); extern _Float64x __roundevenf64x (_Float64x __x) throw () __attribute__ ((__const__));



extern __intmax_t fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                            ;



extern __uintmax_t ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                              ;




extern __intmax_t fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __intmax_t __fromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                             ;




extern __uintmax_t ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw (); extern __uintmax_t __ufromfpxf64x (_Float64x __x, int __round, unsigned int __width) throw ()
                               ;


extern _Float64x fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fmaxmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern _Float64x fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__)); extern _Float64x __fminmagf64x (_Float64x __x, _Float64x __y) throw () __attribute__ ((__const__));


extern int canonicalizef64x (_Float64x *__cx, const _Float64x *__x) throw ();




extern int totalorderf64x (const _Float64x *__x, const _Float64x *__y) throw ()

     __attribute__ ((__pure__));


extern int totalordermagf64x (const _Float64x *__x, const _Float64x *__y) throw ()

     __attribute__ ((__pure__));


extern _Float64x getpayloadf64x (const _Float64x *__x) throw (); extern _Float64x __getpayloadf64x (const _Float64x *__x) throw ();


extern int setpayloadf64x (_Float64x *__x, _Float64x __payload) throw ();


extern int setpayloadsigf64x (_Float64x *__x, _Float64x __payload) throw ();
# 458 "/usr/include/math.h" 2 3 4
# 503 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float fadd (double __x, double __y) throw ();


extern float fdiv (double __x, double __y) throw ();


extern float fmul (double __x, double __y) throw ();


extern float fsub (double __x, double __y) throw ();
# 504 "/usr/include/math.h" 2 3 4
# 517 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern float faddl (long double __x, long double __y) throw ();


extern float fdivl (long double __x, long double __y) throw ();


extern float fmull (long double __x, long double __y) throw ();


extern float fsubl (long double __x, long double __y) throw ();
# 518 "/usr/include/math.h" 2 3 4
# 537 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern double daddl (long double __x, long double __y) throw ();


extern double ddivl (long double __x, long double __y) throw ();


extern double dmull (long double __x, long double __y) throw ();


extern double dsubl (long double __x, long double __y) throw ();
# 538 "/usr/include/math.h" 2 3 4
# 616 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32divf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32mulf32x (_Float32x __x, _Float32x __y) throw ();


extern _Float32 f32subf32x (_Float32x __x, _Float32x __y) throw ();
# 617 "/usr/include/math.h" 2 3 4
# 626 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32divf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32mulf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32 f32subf64 (_Float64 __x, _Float64 __y) throw ();
# 627 "/usr/include/math.h" 2 3 4
# 636 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32divf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32mulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32 f32subf64x (_Float64x __x, _Float64x __y) throw ();
# 637 "/usr/include/math.h" 2 3 4
# 646 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32 f32addf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float32 f32divf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float32 f32mulf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float32 f32subf128 (_Float128 __x, _Float128 __y) throw ();
# 647 "/usr/include/math.h" 2 3 4
# 666 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xdivf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xmulf64 (_Float64 __x, _Float64 __y) throw ();


extern _Float32x f32xsubf64 (_Float64 __x, _Float64 __y) throw ();
# 667 "/usr/include/math.h" 2 3 4
# 676 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xdivf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xmulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float32x f32xsubf64x (_Float64x __x, _Float64x __y) throw ();
# 677 "/usr/include/math.h" 2 3 4
# 686 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float32x f32xaddf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float32x f32xdivf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float32x f32xmulf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float32x f32xsubf128 (_Float128 __x, _Float128 __y) throw ();
# 687 "/usr/include/math.h" 2 3 4
# 706 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64divf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64mulf64x (_Float64x __x, _Float64x __y) throw ();


extern _Float64 f64subf64x (_Float64x __x, _Float64x __y) throw ();
# 707 "/usr/include/math.h" 2 3 4
# 716 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64 f64addf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float64 f64divf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float64 f64mulf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float64 f64subf128 (_Float128 __x, _Float128 __y) throw ();
# 717 "/usr/include/math.h" 2 3 4
# 736 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/mathcalls-narrow.h" 3 4
extern _Float64x f64xaddf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float64x f64xdivf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float64x f64xmulf128 (_Float128 __x, _Float128 __y) throw ();


extern _Float64x f64xsubf128 (_Float128 __x, _Float128 __y) throw ();
# 737 "/usr/include/math.h" 2 3 4
# 773 "/usr/include/math.h" 3 4
extern int signgam;
# 853 "/usr/include/math.h" 3 4
enum
  {
    FP_NAN =

      0,
    FP_INFINITE =

      1,
    FP_ZERO =

      2,
    FP_SUBNORMAL =

      3,
    FP_NORMAL =

      4
  };
# 973 "/usr/include/math.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern int __iscanonicall (long double __x)
     throw () __attribute__ ((__const__));
# 46 "/usr/include/x86_64-linux-gnu/bits/iscanonical.h" 3 4
extern "C++" {
inline int iscanonical (float __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (double __val) { return ((void) (__typeof (__val)) (__val), 1); }
inline int iscanonical (long double __val) { return __iscanonicall (__val); }

inline int iscanonical (_Float128 __val) { return ((void) (__typeof (__val)) (__val), 1); }

}
# 974 "/usr/include/math.h" 2 3 4
# 985 "/usr/include/math.h" 3 4
extern "C++" {
inline int issignaling (float __val) { return __issignalingf (__val); }
inline int issignaling (double __val) { return __issignaling (__val); }
inline int
issignaling (long double __val)
{



  return __issignalingl (__val);

}



inline int issignaling (_Float128 __val) { return __issignalingf128 (__val); }

}
# 1016 "/usr/include/math.h" 3 4
extern "C++" {
# 1047 "/usr/include/math.h" 3 4
template <class __T> inline bool
iszero (__T __val)
{
  return __val == 0;
}

}
# 1278 "/usr/include/math.h" 3 4
extern "C++" {
template<typename> struct __iseqsig_type;

template<> struct __iseqsig_type<float>
{
  static int __call (float __x, float __y) throw ()
  {
    return __iseqsigf (__x, __y);
  }
};

template<> struct __iseqsig_type<double>
{
  static int __call (double __x, double __y) throw ()
  {
    return __iseqsig (__x, __y);
  }
};

template<> struct __iseqsig_type<long double>
{
  static int __call (long double __x, long double __y) throw ()
  {

    return __iseqsigl (__x, __y);



  }
};




template<> struct __iseqsig_type<_Float128>
{
  static int __call (_Float128 __x, _Float128 __y) throw ()
  {
    return __iseqsigf128 (__x, __y);
  }
};


template<typename _T1, typename _T2>
inline int
iseqsig (_T1 __x, _T2 __y) throw ()
{

  typedef decltype (((__x) + (__y) + 0.0f)) _T3;



  return __iseqsig_type<_T3>::__call (__x, __y);
}

}




}
# 46 "/usr/include/c++/9/cmath" 2 3
# 77 "/usr/include/c++/9/cmath" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::acos;


  inline constexpr float
  acos(float __x)
  { return __builtin_acosf(__x); }

  inline constexpr long double
  acos(long double __x)
  { return __builtin_acosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    acos(_Tp __x)
    { return __builtin_acos(__x); }

  using ::asin;


  inline constexpr float
  asin(float __x)
  { return __builtin_asinf(__x); }

  inline constexpr long double
  asin(long double __x)
  { return __builtin_asinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    asin(_Tp __x)
    { return __builtin_asin(__x); }

  using ::atan;


  inline constexpr float
  atan(float __x)
  { return __builtin_atanf(__x); }

  inline constexpr long double
  atan(long double __x)
  { return __builtin_atanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    atan(_Tp __x)
    { return __builtin_atan(__x); }

  using ::atan2;


  inline constexpr float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }

  inline constexpr long double
  atan2(long double __y, long double __x)
  { return __builtin_atan2l(__y, __x); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    atan2(_Tp __y, _Up __x)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return atan2(__type(__y), __type(__x));
    }

  using ::ceil;


  inline constexpr float
  ceil(float __x)
  { return __builtin_ceilf(__x); }

  inline constexpr long double
  ceil(long double __x)
  { return __builtin_ceill(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ceil(_Tp __x)
    { return __builtin_ceil(__x); }

  using ::cos;


  inline constexpr float
  cos(float __x)
  { return __builtin_cosf(__x); }

  inline constexpr long double
  cos(long double __x)
  { return __builtin_cosl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cos(_Tp __x)
    { return __builtin_cos(__x); }

  using ::cosh;


  inline constexpr float
  cosh(float __x)
  { return __builtin_coshf(__x); }

  inline constexpr long double
  cosh(long double __x)
  { return __builtin_coshl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    cosh(_Tp __x)
    { return __builtin_cosh(__x); }

  using ::exp;


  inline constexpr float
  exp(float __x)
  { return __builtin_expf(__x); }

  inline constexpr long double
  exp(long double __x)
  { return __builtin_expl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    exp(_Tp __x)
    { return __builtin_exp(__x); }

  using ::fabs;


  inline constexpr float
  fabs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  fabs(long double __x)
  { return __builtin_fabsl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    fabs(_Tp __x)
    { return __builtin_fabs(__x); }

  using ::floor;


  inline constexpr float
  floor(float __x)
  { return __builtin_floorf(__x); }

  inline constexpr long double
  floor(long double __x)
  { return __builtin_floorl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    floor(_Tp __x)
    { return __builtin_floor(__x); }

  using ::fmod;


  inline constexpr float
  fmod(float __x, float __y)
  { return __builtin_fmodf(__x, __y); }

  inline constexpr long double
  fmod(long double __x, long double __y)
  { return __builtin_fmodl(__x, __y); }


  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
    }

  using ::frexp;


  inline float
  frexp(float __x, int* __exp)
  { return __builtin_frexpf(__x, __exp); }

  inline long double
  frexp(long double __x, int* __exp)
  { return __builtin_frexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    frexp(_Tp __x, int* __exp)
    { return __builtin_frexp(__x, __exp); }

  using ::ldexp;


  inline constexpr float
  ldexp(float __x, int __exp)
  { return __builtin_ldexpf(__x, __exp); }

  inline constexpr long double
  ldexp(long double __x, int __exp)
  { return __builtin_ldexpl(__x, __exp); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    ldexp(_Tp __x, int __exp)
    { return __builtin_ldexp(__x, __exp); }

  using ::log;


  inline constexpr float
  log(float __x)
  { return __builtin_logf(__x); }

  inline constexpr long double
  log(long double __x)
  { return __builtin_logl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log(_Tp __x)
    { return __builtin_log(__x); }

  using ::log10;


  inline constexpr float
  log10(float __x)
  { return __builtin_log10f(__x); }

  inline constexpr long double
  log10(long double __x)
  { return __builtin_log10l(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    log10(_Tp __x)
    { return __builtin_log10(__x); }

  using ::modf;


  inline float
  modf(float __x, float* __iptr)
  { return __builtin_modff(__x, __iptr); }

  inline long double
  modf(long double __x, long double* __iptr)
  { return __builtin_modfl(__x, __iptr); }


  using ::pow;


  inline constexpr float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }

  inline constexpr long double
  pow(long double __x, long double __y)
  { return __builtin_powl(__x, __y); }
# 412 "/usr/include/c++/9/cmath" 3
  template<typename _Tp, typename _Up>
    inline constexpr
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
    }

  using ::sin;


  inline constexpr float
  sin(float __x)
  { return __builtin_sinf(__x); }

  inline constexpr long double
  sin(long double __x)
  { return __builtin_sinl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sin(_Tp __x)
    { return __builtin_sin(__x); }

  using ::sinh;


  inline constexpr float
  sinh(float __x)
  { return __builtin_sinhf(__x); }

  inline constexpr long double
  sinh(long double __x)
  { return __builtin_sinhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sinh(_Tp __x)
    { return __builtin_sinh(__x); }

  using ::sqrt;


  inline constexpr float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }

  inline constexpr long double
  sqrt(long double __x)
  { return __builtin_sqrtl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    sqrt(_Tp __x)
    { return __builtin_sqrt(__x); }

  using ::tan;


  inline constexpr float
  tan(float __x)
  { return __builtin_tanf(__x); }

  inline constexpr long double
  tan(long double __x)
  { return __builtin_tanl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tan(_Tp __x)
    { return __builtin_tan(__x); }

  using ::tanh;


  inline constexpr float
  tanh(float __x)
  { return __builtin_tanhf(__x); }

  inline constexpr long double
  tanh(long double __x)
  { return __builtin_tanhl(__x); }


  template<typename _Tp>
    inline constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    double>::__type
    tanh(_Tp __x)
    { return __builtin_tanh(__x); }
# 536 "/usr/include/c++/9/cmath" 3
  constexpr int
  fpclassify(float __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }

  constexpr int
  fpclassify(long double __x)
  { return __builtin_fpclassify(0, 1, 4,
    3, 2, __x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              int>::__type
    fpclassify(_Tp __x)
    { return __x != 0 ? 4 : 2; }



  constexpr bool
  isfinite(float __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(double __x)
  { return __builtin_isfinite(__x); }

  constexpr bool
  isfinite(long double __x)
  { return __builtin_isfinite(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isfinite(_Tp __x)
    { return true; }



  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }





  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }


  constexpr bool
  isinf(long double __x)
  { return __builtin_isinf(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isinf(_Tp __x)
    { return false; }



  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }





  constexpr bool
  isnan(double __x)
  { return __builtin_isnan(__x); }


  constexpr bool
  isnan(long double __x)
  { return __builtin_isnan(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnan(_Tp __x)
    { return false; }



  constexpr bool
  isnormal(float __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(double __x)
  { return __builtin_isnormal(__x); }

  constexpr bool
  isnormal(long double __x)
  { return __builtin_isnormal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    isnormal(_Tp __x)
    { return __x != 0 ? true : false; }




  constexpr bool
  signbit(float __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(double __x)
  { return __builtin_signbit(__x); }

  constexpr bool
  signbit(long double __x)
  { return __builtin_signbit(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              bool>::__type
    signbit(_Tp __x)
    { return __x < 0 ? true : false; }



  constexpr bool
  isgreater(float __x, float __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(double __x, double __y)
  { return __builtin_isgreater(__x, __y); }

  constexpr bool
  isgreater(long double __x, long double __y)
  { return __builtin_isgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isgreaterequal(float __x, float __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(double __x, double __y)
  { return __builtin_isgreaterequal(__x, __y); }

  constexpr bool
  isgreaterequal(long double __x, long double __y)
  { return __builtin_isgreaterequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isgreaterequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isgreaterequal(__type(__x), __type(__y));
    }



  constexpr bool
  isless(float __x, float __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(double __x, double __y)
  { return __builtin_isless(__x, __y); }

  constexpr bool
  isless(long double __x, long double __y)
  { return __builtin_isless(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isless(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isless(__type(__x), __type(__y));
    }



  constexpr bool
  islessequal(float __x, float __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(double __x, double __y)
  { return __builtin_islessequal(__x, __y); }

  constexpr bool
  islessequal(long double __x, long double __y)
  { return __builtin_islessequal(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessequal(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessequal(__type(__x), __type(__y));
    }



  constexpr bool
  islessgreater(float __x, float __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(double __x, double __y)
  { return __builtin_islessgreater(__x, __y); }

  constexpr bool
  islessgreater(long double __x, long double __y)
  { return __builtin_islessgreater(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    islessgreater(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_islessgreater(__type(__x), __type(__y));
    }



  constexpr bool
  isunordered(float __x, float __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(double __x, double __y)
  { return __builtin_isunordered(__x, __y); }

  constexpr bool
  isunordered(long double __x, long double __y)
  { return __builtin_isunordered(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename
    __gnu_cxx::__enable_if<(__is_arithmetic<_Tp>::__value
       && __is_arithmetic<_Up>::__value), bool>::__type
    isunordered(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return __builtin_isunordered(__type(__x), __type(__y));
    }
# 1065 "/usr/include/c++/9/cmath" 3
  using ::double_t;
  using ::float_t;


  using ::acosh;
  using ::acoshf;
  using ::acoshl;

  using ::asinh;
  using ::asinhf;
  using ::asinhl;

  using ::atanh;
  using ::atanhf;
  using ::atanhl;

  using ::cbrt;
  using ::cbrtf;
  using ::cbrtl;

  using ::copysign;
  using ::copysignf;
  using ::copysignl;

  using ::erf;
  using ::erff;
  using ::erfl;

  using ::erfc;
  using ::erfcf;
  using ::erfcl;

  using ::exp2;
  using ::exp2f;
  using ::exp2l;

  using ::expm1;
  using ::expm1f;
  using ::expm1l;

  using ::fdim;
  using ::fdimf;
  using ::fdiml;

  using ::fma;
  using ::fmaf;
  using ::fmal;

  using ::fmax;
  using ::fmaxf;
  using ::fmaxl;

  using ::fmin;
  using ::fminf;
  using ::fminl;

  using ::hypot;
  using ::hypotf;
  using ::hypotl;

  using ::ilogb;
  using ::ilogbf;
  using ::ilogbl;

  using ::lgamma;
  using ::lgammaf;
  using ::lgammal;


  using ::llrint;
  using ::llrintf;
  using ::llrintl;

  using ::llround;
  using ::llroundf;
  using ::llroundl;


  using ::log1p;
  using ::log1pf;
  using ::log1pl;

  using ::log2;
  using ::log2f;
  using ::log2l;

  using ::logb;
  using ::logbf;
  using ::logbl;

  using ::lrint;
  using ::lrintf;
  using ::lrintl;

  using ::lround;
  using ::lroundf;
  using ::lroundl;

  using ::nan;
  using ::nanf;
  using ::nanl;

  using ::nearbyint;
  using ::nearbyintf;
  using ::nearbyintl;

  using ::nextafter;
  using ::nextafterf;
  using ::nextafterl;

  using ::nexttoward;
  using ::nexttowardf;
  using ::nexttowardl;

  using ::remainder;
  using ::remainderf;
  using ::remainderl;

  using ::remquo;
  using ::remquof;
  using ::remquol;

  using ::rint;
  using ::rintf;
  using ::rintl;

  using ::round;
  using ::roundf;
  using ::roundl;

  using ::scalbln;
  using ::scalblnf;
  using ::scalblnl;

  using ::scalbn;
  using ::scalbnf;
  using ::scalbnl;

  using ::tgamma;
  using ::tgammaf;
  using ::tgammal;

  using ::trunc;
  using ::truncf;
  using ::truncl;



  constexpr float
  acosh(float __x)
  { return __builtin_acoshf(__x); }

  constexpr long double
  acosh(long double __x)
  { return __builtin_acoshl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    acosh(_Tp __x)
    { return __builtin_acosh(__x); }



  constexpr float
  asinh(float __x)
  { return __builtin_asinhf(__x); }

  constexpr long double
  asinh(long double __x)
  { return __builtin_asinhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    asinh(_Tp __x)
    { return __builtin_asinh(__x); }



  constexpr float
  atanh(float __x)
  { return __builtin_atanhf(__x); }

  constexpr long double
  atanh(long double __x)
  { return __builtin_atanhl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    atanh(_Tp __x)
    { return __builtin_atanh(__x); }



  constexpr float
  cbrt(float __x)
  { return __builtin_cbrtf(__x); }

  constexpr long double
  cbrt(long double __x)
  { return __builtin_cbrtl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    cbrt(_Tp __x)
    { return __builtin_cbrt(__x); }



  constexpr float
  copysign(float __x, float __y)
  { return __builtin_copysignf(__x, __y); }

  constexpr long double
  copysign(long double __x, long double __y)
  { return __builtin_copysignl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    copysign(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return copysign(__type(__x), __type(__y));
    }



  constexpr float
  erf(float __x)
  { return __builtin_erff(__x); }

  constexpr long double
  erf(long double __x)
  { return __builtin_erfl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erf(_Tp __x)
    { return __builtin_erf(__x); }



  constexpr float
  erfc(float __x)
  { return __builtin_erfcf(__x); }

  constexpr long double
  erfc(long double __x)
  { return __builtin_erfcl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    erfc(_Tp __x)
    { return __builtin_erfc(__x); }



  constexpr float
  exp2(float __x)
  { return __builtin_exp2f(__x); }

  constexpr long double
  exp2(long double __x)
  { return __builtin_exp2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    exp2(_Tp __x)
    { return __builtin_exp2(__x); }



  constexpr float
  expm1(float __x)
  { return __builtin_expm1f(__x); }

  constexpr long double
  expm1(long double __x)
  { return __builtin_expm1l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    expm1(_Tp __x)
    { return __builtin_expm1(__x); }



  constexpr float
  fdim(float __x, float __y)
  { return __builtin_fdimf(__x, __y); }

  constexpr long double
  fdim(long double __x, long double __y)
  { return __builtin_fdiml(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fdim(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fdim(__type(__x), __type(__y));
    }



  constexpr float
  fma(float __x, float __y, float __z)
  { return __builtin_fmaf(__x, __y, __z); }

  constexpr long double
  fma(long double __x, long double __y, long double __z)
  { return __builtin_fmal(__x, __y, __z); }



  template<typename _Tp, typename _Up, typename _Vp>
    constexpr typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type
    fma(_Tp __x, _Up __y, _Vp __z)
    {
      typedef typename __gnu_cxx::__promote_3<_Tp, _Up, _Vp>::__type __type;
      return fma(__type(__x), __type(__y), __type(__z));
    }



  constexpr float
  fmax(float __x, float __y)
  { return __builtin_fmaxf(__x, __y); }

  constexpr long double
  fmax(long double __x, long double __y)
  { return __builtin_fmaxl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmax(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmax(__type(__x), __type(__y));
    }



  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }

  constexpr long double
  fmin(long double __x, long double __y)
  { return __builtin_fminl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmin(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmin(__type(__x), __type(__y));
    }



  constexpr float
  hypot(float __x, float __y)
  { return __builtin_hypotf(__x, __y); }

  constexpr long double
  hypot(long double __x, long double __y)
  { return __builtin_hypotl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    hypot(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return hypot(__type(__x), __type(__y));
    }



  constexpr int
  ilogb(float __x)
  { return __builtin_ilogbf(__x); }

  constexpr int
  ilogb(long double __x)
  { return __builtin_ilogbl(__x); }



  template<typename _Tp>
    constexpr
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                    int>::__type
    ilogb(_Tp __x)
    { return __builtin_ilogb(__x); }



  constexpr float
  lgamma(float __x)
  { return __builtin_lgammaf(__x); }

  constexpr long double
  lgamma(long double __x)
  { return __builtin_lgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    lgamma(_Tp __x)
    { return __builtin_lgamma(__x); }



  constexpr long long
  llrint(float __x)
  { return __builtin_llrintf(__x); }

  constexpr long long
  llrint(long double __x)
  { return __builtin_llrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llrint(_Tp __x)
    { return __builtin_llrint(__x); }



  constexpr long long
  llround(float __x)
  { return __builtin_llroundf(__x); }

  constexpr long long
  llround(long double __x)
  { return __builtin_llroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long long>::__type
    llround(_Tp __x)
    { return __builtin_llround(__x); }



  constexpr float
  log1p(float __x)
  { return __builtin_log1pf(__x); }

  constexpr long double
  log1p(long double __x)
  { return __builtin_log1pl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log1p(_Tp __x)
    { return __builtin_log1p(__x); }




  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }

  constexpr long double
  log2(long double __x)
  { return __builtin_log2l(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    log2(_Tp __x)
    { return __builtin_log2(__x); }



  constexpr float
  logb(float __x)
  { return __builtin_logbf(__x); }

  constexpr long double
  logb(long double __x)
  { return __builtin_logbl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    logb(_Tp __x)
    { return __builtin_logb(__x); }



  constexpr long
  lrint(float __x)
  { return __builtin_lrintf(__x); }

  constexpr long
  lrint(long double __x)
  { return __builtin_lrintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lrint(_Tp __x)
    { return __builtin_lrint(__x); }



  constexpr long
  lround(float __x)
  { return __builtin_lroundf(__x); }

  constexpr long
  lround(long double __x)
  { return __builtin_lroundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              long>::__type
    lround(_Tp __x)
    { return __builtin_lround(__x); }



  constexpr float
  nearbyint(float __x)
  { return __builtin_nearbyintf(__x); }

  constexpr long double
  nearbyint(long double __x)
  { return __builtin_nearbyintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nearbyint(_Tp __x)
    { return __builtin_nearbyint(__x); }



  constexpr float
  nextafter(float __x, float __y)
  { return __builtin_nextafterf(__x, __y); }

  constexpr long double
  nextafter(long double __x, long double __y)
  { return __builtin_nextafterl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    nextafter(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return nextafter(__type(__x), __type(__y));
    }



  constexpr float
  nexttoward(float __x, long double __y)
  { return __builtin_nexttowardf(__x, __y); }

  constexpr long double
  nexttoward(long double __x, long double __y)
  { return __builtin_nexttowardl(__x, __y); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    nexttoward(_Tp __x, long double __y)
    { return __builtin_nexttoward(__x, __y); }



  constexpr float
  remainder(float __x, float __y)
  { return __builtin_remainderf(__x, __y); }

  constexpr long double
  remainder(long double __x, long double __y)
  { return __builtin_remainderl(__x, __y); }



  template<typename _Tp, typename _Up>
    constexpr typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remainder(_Tp __x, _Up __y)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remainder(__type(__x), __type(__y));
    }



  inline float
  remquo(float __x, float __y, int* __pquo)
  { return __builtin_remquof(__x, __y, __pquo); }

  inline long double
  remquo(long double __x, long double __y, int* __pquo)
  { return __builtin_remquol(__x, __y, __pquo); }



  template<typename _Tp, typename _Up>
    inline typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    remquo(_Tp __x, _Up __y, int* __pquo)
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return remquo(__type(__x), __type(__y), __pquo);
    }



  constexpr float
  rint(float __x)
  { return __builtin_rintf(__x); }

  constexpr long double
  rint(long double __x)
  { return __builtin_rintl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    rint(_Tp __x)
    { return __builtin_rint(__x); }



  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }

  constexpr long double
  round(long double __x)
  { return __builtin_roundl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    round(_Tp __x)
    { return __builtin_round(__x); }



  constexpr float
  scalbln(float __x, long __ex)
  { return __builtin_scalblnf(__x, __ex); }

  constexpr long double
  scalbln(long double __x, long __ex)
  { return __builtin_scalblnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbln(_Tp __x, long __ex)
    { return __builtin_scalbln(__x, __ex); }



  constexpr float
  scalbn(float __x, int __ex)
  { return __builtin_scalbnf(__x, __ex); }

  constexpr long double
  scalbn(long double __x, int __ex)
  { return __builtin_scalbnl(__x, __ex); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    scalbn(_Tp __x, int __ex)
    { return __builtin_scalbn(__x, __ex); }



  constexpr float
  tgamma(float __x)
  { return __builtin_tgammaf(__x); }

  constexpr long double
  tgamma(long double __x)
  { return __builtin_tgammal(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    tgamma(_Tp __x)
    { return __builtin_tgamma(__x); }



  constexpr float
  trunc(float __x)
  { return __builtin_truncf(__x); }

  constexpr long double
  trunc(long double __x)
  { return __builtin_truncl(__x); }



  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value,
                                              double>::__type
    trunc(_Tp __x)
    { return __builtin_trunc(__x); }
# 1923 "/usr/include/c++/9/cmath" 3

}





}
# 37 "/usr/include/c++/9/math.h" 2 3

using std::abs;
using std::acos;
using std::asin;
using std::atan;
using std::atan2;
using std::cos;
using std::sin;
using std::tan;
using std::cosh;
using std::sinh;
using std::tanh;
using std::exp;
using std::frexp;
using std::ldexp;
using std::log;
using std::log10;
using std::modf;
using std::pow;
using std::sqrt;
using std::ceil;
using std::fabs;
using std::floor;
using std::fmod;


using std::fpclassify;
using std::isfinite;
using std::isinf;
using std::isnan;
using std::isnormal;
using std::signbit;
using std::isgreater;
using std::isgreaterequal;
using std::isless;
using std::islessequal;
using std::islessgreater;
using std::isunordered;



using std::acosh;
using std::asinh;
using std::atanh;
using std::cbrt;
using std::copysign;
using std::erf;
using std::erfc;
using std::exp2;
using std::expm1;
using std::fdim;
using std::fma;
using std::fmax;
using std::fmin;
using std::hypot;
using std::ilogb;
using std::lgamma;
using std::llrint;
using std::llround;
using std::log1p;
using std::log2;
using std::logb;
using std::lrint;
using std::lround;
using std::nearbyint;
using std::nextafter;
using std::nexttoward;
using std::remainder;
using std::remquo;
using std::rint;
using std::round;
using std::scalbln;
using std::scalbn;
using std::tgamma;
using std::trunc;
# 22 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 2



# 1 "/usr/include/x86_64-linux-gnu/sys/mman.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4
# 41 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman.h" 1 3 4
# 31 "/usr/include/x86_64-linux-gnu/bits/mman.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-map-flags-generic.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/mman.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 1 3 4
# 113 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 1 3 4
# 46 "/usr/include/x86_64-linux-gnu/bits/mman-shared.h" 3 4
extern "C" {



int memfd_create (const char *__name, unsigned int __flags) throw ();



int mlock2 (const void *__addr, size_t __length, unsigned int __flags) throw ();





int pkey_alloc (unsigned int __flags, unsigned int __access_rights) throw ();



int pkey_set (int __key, unsigned int __access_rights) throw ();



int pkey_get (int __key) throw ();



int pkey_free (int __key) throw ();



int pkey_mprotect (void *__addr, size_t __len, int __prot, int __pkey) throw ();

}
# 113 "/usr/include/x86_64-linux-gnu/bits/mman-linux.h" 2 3 4
# 34 "/usr/include/x86_64-linux-gnu/bits/mman.h" 2 3 4
# 42 "/usr/include/x86_64-linux-gnu/sys/mman.h" 2 3 4




extern "C" {
# 57 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mmap (void *__addr, size_t __len, int __prot,
     int __flags, int __fd, __off_t __offset) throw ();
# 70 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mmap64 (void *__addr, size_t __len, int __prot,
       int __flags, int __fd, __off64_t __offset) throw ();




extern int munmap (void *__addr, size_t __len) throw ();




extern int mprotect (void *__addr, size_t __len, int __prot) throw ();







extern int msync (void *__addr, size_t __len, int __flags);




extern int madvise (void *__addr, size_t __len, int __advice) throw ();



extern int posix_madvise (void *__addr, size_t __len, int __advice) throw ();




extern int mlock (const void *__addr, size_t __len) throw ();


extern int munlock (const void *__addr, size_t __len) throw ();




extern int mlockall (int __flags) throw ();



extern int munlockall (void) throw ();







extern int mincore (void *__start, size_t __len, unsigned char *__vec)
     throw ();
# 133 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
extern void *mremap (void *__addr, size_t __old_len, size_t __new_len,
       int __flags, ...) throw ();



extern int remap_file_pages (void *__start, size_t __size, int __prot,
        size_t __pgoff, int __flags) throw ();




extern int shm_open (const char *__name, int __oflag, mode_t __mode);


extern int shm_unlink (const char *__name);

}
# 26 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 2






# 31 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
namespace libzpaq {


void* calloc(size_t a, size_t b) {return ::calloc(a, b);}
void free(void* p) {::free(p);}
int memcmp(const void* d, const void* s, size_t n) {
  return ::memcmp(d, s, n);}
void* memset(void* d, int c, size_t n) {return ::memset(d, c, n);}
double log(double x) {return ::log(x);}
double exp(double x) {return ::exp(x);}
double pow(double x, double y) {return ::pow(x, y);}


int toU16(const char* p) {
  return (p[0]&255)+256*(p[1]&255);
}


int Reader::read(char* buf, int n) {
  int i=0, c;
  while (i<n && (c=get())>=0)
    buf[i++]=c;
  return i;
}

void Writer::write(const char* buf, int n) {
  for (int i=0; i<n; ++i)
    put(U8(buf[i]));
}

void error(const char* msg) {
  fprintf(
# 62 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
         stderr
# 62 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
               , "zpipe error: %s\n", msg);
  exit(1);
}







void allocx(U8* &p, int &n, int newsize) {




  if (p || n) {
    if (p)

      munmap(p, n);



    p=0;
    n=0;
  }
  if (newsize>0) {

    p=(U8*)mmap(0, newsize, 
# 89 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
                           0x1
# 89 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                    |
# 89 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
                                     0x2
# 89 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                               |
# 89 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
                                                0x4
# 89 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                                         ,
                
# 90 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
               0x02
# 90 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                          |
# 90 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
                           0x20
# 90 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                   , -1, 0);
    if ((void*)p==
# 91 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
                 ((void *) -1)
# 91 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                           ) p=0;




    if (p)
      n=newsize;
    else {
      n=0;
      error("allocx failed");
    }
  }

}






void SHA1::init() {
  len0=len1=0;
  h[0]=0x67452301;
  h[1]=0xEFCDAB89;
  h[2]=0x98BADCFE;
  h[3]=0x10325476;
  h[4]=0xC3D2E1F0;
}


const char* SHA1::result() {


  const U32 s1=len1, s0=len0;
  put(0x80);
  while ((len0&511)!=448)
    put(0);
  put(s1>>24);
  put(s1>>16);
  put(s1>>8);
  put(s1);
  put(s0>>24);
  put(s0>>16);
  put(s0>>8);
  put(s0);


  for (int i=0; i<5; ++i) {
    hbuf[4*i]=h[i]>>24;
    hbuf[4*i+1]=h[i]>>16;
    hbuf[4*i+2]=h[i]>>8;
    hbuf[4*i+3]=h[i];
  }


  init();
  return hbuf;
}


void SHA1::process() {
  for (int i=16; i<80; ++i) {
    w[i]=w[i-3]^w[i-8]^w[i-14]^w[i-16];
    w[i]=w[i]<<1|w[i]>>31;
  }
  U32 a=h[0];
  U32 b=h[1];
  U32 c=h[2];
  U32 d=h[3];
  U32 e=h[4];
  const U32 k1=0x5A827999, k2=0x6ED9EBA1, k3=0x8F1BBCDC, k4=0xCA62C1D6;



  e+=(a<<5|a>>27)+((b&c)|(~b&d))+k1+w[0]; b=b<<30|b>>2; d+=(e<<5|e>>27)+((a&b)|(~a&c))+k1+w[0 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+((e&a)|(~e&b))+k1+w[0 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+((d&e)|(~d&a))+k1+w[0 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+((c&d)|(~c&e))+k1+w[0 +4]; c=c<<30|c>>2; e+=(a<<5|a>>27)+((b&c)|(~b&d))+k1+w[5]; b=b<<30|b>>2; d+=(e<<5|e>>27)+((a&b)|(~a&c))+k1+w[5 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+((e&a)|(~e&b))+k1+w[5 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+((d&e)|(~d&a))+k1+w[5 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+((c&d)|(~c&e))+k1+w[5 +4]; c=c<<30|c>>2; e+=(a<<5|a>>27)+((b&c)|(~b&d))+k1+w[10]; b=b<<30|b>>2; d+=(e<<5|e>>27)+((a&b)|(~a&c))+k1+w[10 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+((e&a)|(~e&b))+k1+w[10 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+((d&e)|(~d&a))+k1+w[10 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+((c&d)|(~c&e))+k1+w[10 +4]; c=c<<30|c>>2; e+=(a<<5|a>>27)+((b&c)|(~b&d))+k1+w[15]; b=b<<30|b>>2; d+=(e<<5|e>>27)+((a&b)|(~a&c))+k1+w[15 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+((e&a)|(~e&b))+k1+w[15 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+((d&e)|(~d&a))+k1+w[15 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+((c&d)|(~c&e))+k1+w[15 +4]; c=c<<30|c>>2;


  e+=(a<<5|a>>27)+(b^c^d)+k2+w[20]; b=b<<30|b>>2; d+=(e<<5|e>>27)+(a^b^c)+k2+w[20 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+(e^a^b)+k2+w[20 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+(d^e^a)+k2+w[20 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+(c^d^e)+k2+w[20 +4]; c=c<<30|c>>2; e+=(a<<5|a>>27)+(b^c^d)+k2+w[25]; b=b<<30|b>>2; d+=(e<<5|e>>27)+(a^b^c)+k2+w[25 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+(e^a^b)+k2+w[25 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+(d^e^a)+k2+w[25 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+(c^d^e)+k2+w[25 +4]; c=c<<30|c>>2; e+=(a<<5|a>>27)+(b^c^d)+k2+w[30]; b=b<<30|b>>2; d+=(e<<5|e>>27)+(a^b^c)+k2+w[30 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+(e^a^b)+k2+w[30 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+(d^e^a)+k2+w[30 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+(c^d^e)+k2+w[30 +4]; c=c<<30|c>>2; e+=(a<<5|a>>27)+(b^c^d)+k2+w[35]; b=b<<30|b>>2; d+=(e<<5|e>>27)+(a^b^c)+k2+w[35 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+(e^a^b)+k2+w[35 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+(d^e^a)+k2+w[35 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+(c^d^e)+k2+w[35 +4]; c=c<<30|c>>2;


  e+=(a<<5|a>>27)+((b&c)|(b&d)|(c&d))+k3+w[40]; b=b<<30|b>>2; d+=(e<<5|e>>27)+((a&b)|(a&c)|(b&c))+k3+w[40 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+((e&a)|(e&b)|(a&b))+k3+w[40 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+((d&e)|(d&a)|(e&a))+k3+w[40 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+((c&d)|(c&e)|(d&e))+k3+w[40 +4]; c=c<<30|c>>2; e+=(a<<5|a>>27)+((b&c)|(b&d)|(c&d))+k3+w[45]; b=b<<30|b>>2; d+=(e<<5|e>>27)+((a&b)|(a&c)|(b&c))+k3+w[45 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+((e&a)|(e&b)|(a&b))+k3+w[45 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+((d&e)|(d&a)|(e&a))+k3+w[45 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+((c&d)|(c&e)|(d&e))+k3+w[45 +4]; c=c<<30|c>>2; e+=(a<<5|a>>27)+((b&c)|(b&d)|(c&d))+k3+w[50]; b=b<<30|b>>2; d+=(e<<5|e>>27)+((a&b)|(a&c)|(b&c))+k3+w[50 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+((e&a)|(e&b)|(a&b))+k3+w[50 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+((d&e)|(d&a)|(e&a))+k3+w[50 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+((c&d)|(c&e)|(d&e))+k3+w[50 +4]; c=c<<30|c>>2; e+=(a<<5|a>>27)+((b&c)|(b&d)|(c&d))+k3+w[55]; b=b<<30|b>>2; d+=(e<<5|e>>27)+((a&b)|(a&c)|(b&c))+k3+w[55 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+((e&a)|(e&b)|(a&b))+k3+w[55 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+((d&e)|(d&a)|(e&a))+k3+w[55 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+((c&d)|(c&e)|(d&e))+k3+w[55 +4]; c=c<<30|c>>2;


  e+=(a<<5|a>>27)+(b^c^d)+k4+w[60]; b=b<<30|b>>2; d+=(e<<5|e>>27)+(a^b^c)+k4+w[60 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+(e^a^b)+k4+w[60 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+(d^e^a)+k4+w[60 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+(c^d^e)+k4+w[60 +4]; c=c<<30|c>>2; e+=(a<<5|a>>27)+(b^c^d)+k4+w[65]; b=b<<30|b>>2; d+=(e<<5|e>>27)+(a^b^c)+k4+w[65 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+(e^a^b)+k4+w[65 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+(d^e^a)+k4+w[65 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+(c^d^e)+k4+w[65 +4]; c=c<<30|c>>2; e+=(a<<5|a>>27)+(b^c^d)+k4+w[70]; b=b<<30|b>>2; d+=(e<<5|e>>27)+(a^b^c)+k4+w[70 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+(e^a^b)+k4+w[70 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+(d^e^a)+k4+w[70 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+(c^d^e)+k4+w[70 +4]; c=c<<30|c>>2; e+=(a<<5|a>>27)+(b^c^d)+k4+w[75]; b=b<<30|b>>2; d+=(e<<5|e>>27)+(a^b^c)+k4+w[75 +1]; a=a<<30|a>>2; c+=(d<<5|d>>27)+(e^a^b)+k4+w[75 +2]; e=e<<30|e>>2; b+=(c<<5|c>>27)+(d^e^a)+k4+w[75 +3]; d=d<<30|d>>2; a+=(b<<5|b>>27)+(c^d^e)+k4+w[75 +4]; c=c<<30|c>>2;


  h[0]+=a;
  h[1]+=b;
  h[2]+=c;
  h[3]+=d;
  h[4]+=e;
}
# 191 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
const int compsize[256]={0,2,3,2,3,4,6,6,3,5};

void Component::init() {
  limit=cxt=a=b=c=0;
  cm.resize(0);
  ht.resize(0);
  a16.resize(0);
}




int StateTable::num_states(int n0, int n1) {
  const int B=6;
  const int bound[B]={20,48,15,8,6,5};
  if (n0<n1) return num_states(n1, n0);
  if (n0<0 || n1<0 || n1>=B || n0>bound[n1]) return 0;
  return 1+(n1>0 && n0+n1<=17);
}


void StateTable::discount(int& n0) {
  n0=(n0>=1)+(n0>=2)+(n0>=3)+(n0>=4)+(n0>=5)+(n0>=7)+(n0>=8);
}


void StateTable::next_state(int& n0, int& n1, int y) {
  if (n0<n1)
    next_state(n1, n0, 1-y);
  else {
    if (y) {
      ++n1;
      discount(n0);
    }
    else {
      ++n0;
      discount(n1);
    }
# 237 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
    while (!num_states(n0, n1)) {
      if (n1<2) --n0;
      else {
        n0=(n0*(n1-1)+(n1/2))/n1;
        --n1;
      }
    }
  }
}


StateTable::StateTable() {


  const int N=50;
  U8 t[N][N][2]={{{0}}};
  int state=0;
  for (int i=0; i<N; ++i) {
    for (int n1=0; n1<=i; ++n1) {
      int n0=i-n1;
      int n=num_states(n0, n1);
      
# 258 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
     (static_cast<void> (0))
# 258 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                         ;
      if (n) {
        t[n0][n1][0]=state;
        t[n0][n1][1]=state+n-1;
        state+=n;
      }
    }
  }


  memset(ns, 0, sizeof(ns));
  for (int n0=0; n0<N; ++n0) {
    for (int n1=0; n1<N; ++n1) {
      for (int y=0; y<num_states(n0, n1); ++y) {
        int s=t[n0][n1][y];
        
# 273 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 273 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                            ;
        int s0=n0, s1=n1;
        next_state(s0, s1, 0);
        
# 276 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 276 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                             ;
        ns[s*4+0]=t[s0][s1][0];
        s0=n0, s1=n1;
        next_state(s0, s1, 1);
        
# 280 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 280 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                             ;
        ns[s*4+1]=t[s0][s1][1];
        ns[s*4+2]=n0;
        ns[s*4+3]=n1;
      }
    }
  }
}





bool ZPAQL::write(Writer* out2, bool pp) {
  if (header.size()<=6) return false;
  
# 295 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 295 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                                    ;
  
# 296 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 296 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                ;
  
# 297 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 297 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                     ;
  
# 298 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 298 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                     ;
  
# 299 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 299 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
             ;
  if (!pp) {
    for (int i=0; i<cend; ++i)
      out2->put(header[i]);
  }
  else {
    out2->put((hend-hbegin)&255);
    out2->put((hend-hbegin)>>8);
  }
  for (int i=hbegin; i<hend; ++i)
    out2->put(header[i]);
  return true;
}


int ZPAQL::read(Reader* in2) {


  int hsize=in2->get();
  hsize+=in2->get()*256;
  header.resize(hsize+300);
  cend=hbegin=hend=0;
  header[cend++]=hsize&255;
  header[cend++]=hsize>>8;
  while (cend<7) header[cend++]=in2->get();


  int n=header[cend-1];
  for (int i=0; i<n; ++i) {
    int type=in2->get();
    if (type==-1) error("unexpected end of file");
    header[cend++]=type;
    int size=compsize[type];
    if (size<1) error("Invalid component type");
    if (cend+size>header.isize()-8) error("COMP list too big");
    for (int j=1; j<size; ++j)
      header[cend++]=in2->get();
  }
  if ((header[cend++]=in2->get())!=0) error("missing COMP END");


  hbegin=hend=cend+128;
  while (hend<hsize+129) {
    
# 342 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 342 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                ;
    int op=in2->get();
    if (op==-1) error("unexpected end of file");
    header[hend++]=op;
  }
  if ((header[hend++]=in2->get())!=0) error("missing HCOMP END");
  
# 348 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 348 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                       ;
  
# 349 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 349 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                                  ;
  
# 350 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 350 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                           ;
  
# 351 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 351 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                       ;
  
# 352 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 352 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                  ;
  allocx(rcode, rcode_size, 0);
  return cend+hend-hbegin;
}


void ZPAQL::clear() {
  cend=hbegin=hend=0;
  a=b=c=d=f=pc=0;
  header.resize(0);
  h.resize(0);
  m.resize(0);
  r.resize(0);
  allocx(rcode, rcode_size, 0);
}


ZPAQL::ZPAQL() {
  output=0;
  sha1=0;
  rcode=0;
  rcode_size=0;
  clear();
  outbuf.resize(1<<14);
  bufptr=0;
}

ZPAQL::~ZPAQL() {
  allocx(rcode, rcode_size, 0);
}


void ZPAQL::inith() {
  
# 385 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 385 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                         ;
  
# 386 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 386 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                  ;
  
# 387 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 387 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                ;
  init(header[2], header[3]);
}


void ZPAQL::initp() {
  
# 393 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 393 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                         ;
  init(header[4], header[5]);
}


void ZPAQL::flush() {
  if (output) output->write(&outbuf[0], bufptr);
  if (sha1) for (int i=0; i<bufptr; ++i) sha1->put(U8(outbuf[i]));
  bufptr=0;
}


double ZPAQL::memory() {
  double mem=pow(2.0,header[2]+2)+pow(2.0,header[3])
            +pow(2.0,header[4]+2)+pow(2.0,header[5])
            +header.size();
  int cp=7;
  for (int i=0; i<header[6]; ++i) {
    
# 411 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 411 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                  ;
    double size=pow(2.0, header[cp+1]);
    switch(header[cp]) {
      case CM: mem+=4*size; break;
      case ICM: mem+=64*size+1024; break;
      case MATCH: mem+=4*size+pow(2.0, header[cp+2]); break;
      case MIX2: mem+=2*size; break;
      case MIX: mem+=4*size*header[cp+3]; break;
      case ISSE: mem+=64*size+2048; break;
      case SSE: mem+=128*size; break;
    }
    cp+=compsize[header[cp]];
  }
  return mem;
}


void ZPAQL::init(int hbits, int mbits) {
  
# 429 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 429 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                         ;
  
# 430 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 430 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                ;
  
# 431 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 431 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                         ;
  
# 432 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 432 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                     ;
  
# 433 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 433 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                ;
  
# 434 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 434 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                                    ;
  
# 435 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 435 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                  ;
  
# 436 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 436 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                         ;
  h.resize(1, hbits);
  m.resize(1, mbits);
  r.resize(256);
  a=b=c=d=pc=f=0;
}


void ZPAQL::run0(U32 input) {
  
# 445 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 445 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
               ;
  
# 446 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 446 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                         ;
  
# 447 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 447 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                     ;
  
# 448 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 448 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                ;
  
# 449 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 449 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                   ;
  
# 450 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 450 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                   ;
  
# 451 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 451 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                                    ;
  pc=hbegin;
  a=input;
  while (execute()) ;
}


int ZPAQL::execute() {
  switch(header[pc++]) {
    case 0: err(); break;
    case 1: ++a; break;
    case 2: --a; break;
    case 3: a = ~a; break;
    case 4: a = 0; break;
    case 7: a = r[header[pc++]]; break;
    case 8: swap(b); break;
    case 9: ++b; break;
    case 10: --b; break;
    case 11: b = ~b; break;
    case 12: b = 0; break;
    case 15: b = r[header[pc++]]; break;
    case 16: swap(c); break;
    case 17: ++c; break;
    case 18: --c; break;
    case 19: c = ~c; break;
    case 20: c = 0; break;
    case 23: c = r[header[pc++]]; break;
    case 24: swap(d); break;
    case 25: ++d; break;
    case 26: --d; break;
    case 27: d = ~d; break;
    case 28: d = 0; break;
    case 31: d = r[header[pc++]]; break;
    case 32: swap(m(b)); break;
    case 33: ++m(b); break;
    case 34: --m(b); break;
    case 35: m(b) = ~m(b); break;
    case 36: m(b) = 0; break;
    case 39: if (f) pc+=((header[pc]+128)&255)-127; else ++pc; break;
    case 40: swap(m(c)); break;
    case 41: ++m(c); break;
    case 42: --m(c); break;
    case 43: m(c) = ~m(c); break;
    case 44: m(c) = 0; break;
    case 47: if (!f) pc+=((header[pc]+128)&255)-127; else ++pc; break;
    case 48: swap(h(d)); break;
    case 49: ++h(d); break;
    case 50: --h(d); break;
    case 51: h(d) = ~h(d); break;
    case 52: h(d) = 0; break;
    case 55: r[header[pc++]] = a; break;
    case 56: return 0 ;
    case 57: outc(a&255); break;
    case 59: a = (a+m(b)+512)*773; break;
    case 60: h(d) = (h(d)+a+512)*773; break;
    case 63: pc+=((header[pc]+128)&255)-127; break;
    case 64: break;
    case 65: a = b; break;
    case 66: a = c; break;
    case 67: a = d; break;
    case 68: a = m(b); break;
    case 69: a = m(c); break;
    case 70: a = h(d); break;
    case 71: a = header[pc++]; break;
    case 72: b = a; break;
    case 73: break;
    case 74: b = c; break;
    case 75: b = d; break;
    case 76: b = m(b); break;
    case 77: b = m(c); break;
    case 78: b = h(d); break;
    case 79: b = header[pc++]; break;
    case 80: c = a; break;
    case 81: c = b; break;
    case 82: break;
    case 83: c = d; break;
    case 84: c = m(b); break;
    case 85: c = m(c); break;
    case 86: c = h(d); break;
    case 87: c = header[pc++]; break;
    case 88: d = a; break;
    case 89: d = b; break;
    case 90: d = c; break;
    case 91: break;
    case 92: d = m(b); break;
    case 93: d = m(c); break;
    case 94: d = h(d); break;
    case 95: d = header[pc++]; break;
    case 96: m(b) = a; break;
    case 97: m(b) = b; break;
    case 98: m(b) = c; break;
    case 99: m(b) = d; break;
    case 100: m(b) = m(b); break;
    case 101: m(b) = m(c); break;
    case 102: m(b) = h(d); break;
    case 103: m(b) = header[pc++]; break;
    case 104: m(c) = a; break;
    case 105: m(c) = b; break;
    case 106: m(c) = c; break;
    case 107: m(c) = d; break;
    case 108: m(c) = m(b); break;
    case 109: m(c) = m(c); break;
    case 110: m(c) = h(d); break;
    case 111: m(c) = header[pc++]; break;
    case 112: h(d) = a; break;
    case 113: h(d) = b; break;
    case 114: h(d) = c; break;
    case 115: h(d) = d; break;
    case 116: h(d) = m(b); break;
    case 117: h(d) = m(c); break;
    case 118: h(d) = h(d); break;
    case 119: h(d) = header[pc++]; break;
    case 128: a += a; break;
    case 129: a += b; break;
    case 130: a += c; break;
    case 131: a += d; break;
    case 132: a += m(b); break;
    case 133: a += m(c); break;
    case 134: a += h(d); break;
    case 135: a += header[pc++]; break;
    case 136: a -= a; break;
    case 137: a -= b; break;
    case 138: a -= c; break;
    case 139: a -= d; break;
    case 140: a -= m(b); break;
    case 141: a -= m(c); break;
    case 142: a -= h(d); break;
    case 143: a -= header[pc++]; break;
    case 144: a *= a; break;
    case 145: a *= b; break;
    case 146: a *= c; break;
    case 147: a *= d; break;
    case 148: a *= m(b); break;
    case 149: a *= m(c); break;
    case 150: a *= h(d); break;
    case 151: a *= header[pc++]; break;
    case 152: div(a); break;
    case 153: div(b); break;
    case 154: div(c); break;
    case 155: div(d); break;
    case 156: div(m(b)); break;
    case 157: div(m(c)); break;
    case 158: div(h(d)); break;
    case 159: div(header[pc++]); break;
    case 160: mod(a); break;
    case 161: mod(b); break;
    case 162: mod(c); break;
    case 163: mod(d); break;
    case 164: mod(m(b)); break;
    case 165: mod(m(c)); break;
    case 166: mod(h(d)); break;
    case 167: mod(header[pc++]); break;
    case 168: a &= a; break;
    case 169: a &= b; break;
    case 170: a &= c; break;
    case 171: a &= d; break;
    case 172: a &= m(b); break;
    case 173: a &= m(c); break;
    case 174: a &= h(d); break;
    case 175: a &= header[pc++]; break;
    case 176: a &= ~ a; break;
    case 177: a &= ~ b; break;
    case 178: a &= ~ c; break;
    case 179: a &= ~ d; break;
    case 180: a &= ~ m(b); break;
    case 181: a &= ~ m(c); break;
    case 182: a &= ~ h(d); break;
    case 183: a &= ~ header[pc++]; break;
    case 184: a |= a; break;
    case 185: a |= b; break;
    case 186: a |= c; break;
    case 187: a |= d; break;
    case 188: a |= m(b); break;
    case 189: a |= m(c); break;
    case 190: a |= h(d); break;
    case 191: a |= header[pc++]; break;
    case 192: a ^= a; break;
    case 193: a ^= b; break;
    case 194: a ^= c; break;
    case 195: a ^= d; break;
    case 196: a ^= m(b); break;
    case 197: a ^= m(c); break;
    case 198: a ^= h(d); break;
    case 199: a ^= header[pc++]; break;
    case 200: a <<= (a&31); break;
    case 201: a <<= (b&31); break;
    case 202: a <<= (c&31); break;
    case 203: a <<= (d&31); break;
    case 204: a <<= (m(b)&31); break;
    case 205: a <<= (m(c)&31); break;
    case 206: a <<= (h(d)&31); break;
    case 207: a <<= (header[pc++]&31); break;
    case 208: a >>= (a&31); break;
    case 209: a >>= (b&31); break;
    case 210: a >>= (c&31); break;
    case 211: a >>= (d&31); break;
    case 212: a >>= (m(b)&31); break;
    case 213: a >>= (m(c)&31); break;
    case 214: a >>= (h(d)&31); break;
    case 215: a >>= (header[pc++]&31); break;
    case 216: f = (true); break;
    case 217: f = (a == b); break;
    case 218: f = (a == c); break;
    case 219: f = (a == d); break;
    case 220: f = (a == U32(m(b))); break;
    case 221: f = (a == U32(m(c))); break;
    case 222: f = (a == h(d)); break;
    case 223: f = (a == U32(header[pc++])); break;
    case 224: f = (false); break;
    case 225: f = (a < b); break;
    case 226: f = (a < c); break;
    case 227: f = (a < d); break;
    case 228: f = (a < U32(m(b))); break;
    case 229: f = (a < U32(m(c))); break;
    case 230: f = (a < h(d)); break;
    case 231: f = (a < U32(header[pc++])); break;
    case 232: f = (false); break;
    case 233: f = (a > b); break;
    case 234: f = (a > c); break;
    case 235: f = (a > d); break;
    case 236: f = (a > U32(m(b))); break;
    case 237: f = (a > U32(m(c))); break;
    case 238: f = (a > h(d)); break;
    case 239: f = (a > U32(header[pc++])); break;
    case 255: if((pc=hbegin+header[pc]+256*header[pc+1])>=hend)err();break;
    default: err();
  }
  return 1;
}


void ZPAQL::err() {
  error("ZPAQL execution error");
}




Predictor::Predictor(ZPAQL& zr):
    c8(1), hmap4(1), z(zr) {
  
# 691 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 691 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                      ;
  
# 692 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 692 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                       ;
  
# 693 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 693 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                       ;
  
# 694 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 694 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                       ;
  
# 695 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 695 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                         ;
  
# 696 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 696 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                       ;


  dt2k[0]=0;
  for (int i=1; i<256; ++i)
    dt2k[i]=2048/i;
  for (int i=0; i<1024; ++i)
    dt[i]=(1<<17)/(i*2+3)*2;
  for (int i=0; i<32768; ++i)
    stretcht[i]=int(log((i+0.5)/(32767.5-i))*64+0.5+100000)-100000;
  for (int i=0; i<4096; ++i)
    squasht[i]=int(32768.0/(1+exp((i-2048)*(-1.0/64))));


  U32 sqsum=0, stsum=0;
  for (int i=32767; i>=0; --i)
    stsum=stsum*3+stretch(i);
  for (int i=4095; i>=0; --i)
    sqsum=sqsum*3+squash(i-2048);
  
# 715 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 715 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                           ;
  
# 716 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 716 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                           ;

  pcode=0;
  pcode_size=0;
}

Predictor::~Predictor() {
  allocx(pcode, pcode_size, 0);
}


void Predictor::init() {


  allocx(pcode, pcode_size, 0);


  z.inith();


  for (int i=0; i<256; ++i) h[i]=p[i]=0;


  for (int i=0; i<256; ++i)
    comp[i].init();
  int n=z.header[6];
  const U8* cp=&z.header[7];
  for (int i=0; i<n; ++i) {
    
# 744 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 744 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                               ;
    
# 745 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 745 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                                              ;
    Component& cr=comp[i];
    switch(cp[0]) {
      case CONS:
        p[i]=(cp[1]-128)*4;
        break;
      case CM:
        if (cp[1]>32) error("max size for CM is 32");
        cr.cm.resize(1, cp[1]);
        cr.limit=cp[2]*4;
        for (size_t j=0; j<cr.cm.size(); ++j)
          cr.cm[j]=0x80000000;
        break;
      case ICM:
        if (cp[1]>26) error("max size for ICM is 26");
        cr.limit=1023;
        cr.cm.resize(256);
        cr.ht.resize(64, cp[1]);
        for (size_t j=0; j<cr.cm.size(); ++j)
          cr.cm[j]=st.cminit(j);
        break;
      case MATCH:
        if (cp[1]>32 || cp[2]>32) error("max size for MATCH is 32 32");
        cr.cm.resize(1, cp[1]);
        cr.ht.resize(1, cp[2]);
        cr.ht(0)=1;
        break;
      case AVG:
        if (cp[1]>=i) error("AVG j >= i");
        if (cp[2]>=i) error("AVG k >= i");
        break;
      case MIX2:
        if (cp[1]>32) error("max size for MIX2 is 32");
        if (cp[3]>=i) error("MIX2 k >= i");
        if (cp[2]>=i) error("MIX2 j >= i");
        cr.c=(size_t(1)<<cp[1]);
        cr.a16.resize(1, cp[1]);
        for (size_t j=0; j<cr.a16.size(); ++j)
          cr.a16[j]=32768;
        break;
      case MIX: {
        if (cp[1]>32) error("max size for MIX is 32");
        if (cp[2]>=i) error("MIX j >= i");
        if (cp[3]<1 || cp[3]>i-cp[2]) error("MIX m not in 1..i-j");
        int m=cp[3];
        
# 790 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 790 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                   ;
        cr.c=(size_t(1)<<cp[1]);
        cr.cm.resize(m, cp[1]);
        for (size_t j=0; j<cr.cm.size(); ++j)
          cr.cm[j]=65536/m;
        break;
      }
      case ISSE:
        if (cp[1]>32) error("max size for ISSE is 32");
        if (cp[2]>=i) error("ISSE j >= i");
        cr.ht.resize(64, cp[1]);
        cr.cm.resize(512);
        for (int j=0; j<256; ++j) {
          cr.cm[j*2]=1<<15;
          cr.cm[j*2+1]=clamp512k(stretch(st.cminit(j)>>8)<<10);
        }
        break;
      case SSE:
        if (cp[1]>32) error("max size for SSE is 32");
        if (cp[2]>=i) error("SSE j >= i");
        if (cp[3]>cp[4]*4) error("SSE start > limit*4");
        cr.cm.resize(32, cp[1]);
        cr.limit=cp[4]*4;
        for (size_t j=0; j<cr.cm.size(); ++j)
          cr.cm[j]=squash((j&31)*64-992)<<17|cp[3];
        break;
      default: error("unknown component type");
    }
    
# 818 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 818 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                          ;
    cp+=compsize[*cp];
    
# 820 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 820 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                                   ;
  }
}


int Predictor::predict0() {
  
# 826 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 826 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                         ;


  int n=z.header[6];
  
# 830 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 830 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                      ;
  const U8* cp=&z.header[7];
  
# 832 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 832 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                  ;
  for (int i=0; i<n; ++i) {
    
# 834 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 834 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                                              ;
    Component& cr=comp[i];
    switch(cp[0]) {
      case CONS:
        break;
      case CM:
        cr.cxt=h[i]^hmap4;
        p[i]=stretch(cr.cm(cr.cxt)>>17);
        break;
      case ICM:
        
# 844 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 844 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                           ;
        if (c8==1 || (c8&0xf0)==16) cr.c=find(cr.ht, cp[1]+2, h[i]+16*c8);
        cr.cxt=cr.ht[cr.c+(hmap4&15)];
        p[i]=stretch(cr.cm(cr.cxt)>>8);
        break;
      case MATCH:

        
# 851 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 851 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                               ;
        
# 852 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 852 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                               ;
        
# 853 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 853 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                        ;
        
# 854 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 854 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                 ;
        
# 855 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 855 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                       ;
        
# 856 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 856 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                    ;
        if (cr.a==0) p[i]=0;
        else {
          cr.c=(cr.ht(cr.limit-cr.b)>>(7-cr.cxt))&1;
          p[i]=stretch(dt2k[cr.a]*(cr.c*-2+1)&32767);
        }
        break;
      case AVG:
        p[i]=(p[cp[1]]*cp[3]+p[cp[2]]*(256-cp[3]))>>8;
        break;
      case MIX2: {

        cr.cxt=((h[i]+(c8&cp[5]))&(cr.c-1));
        
# 869 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 869 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                   ;
        int w=cr.a16[cr.cxt];
        
# 871 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 871 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                              ;
        p[i]=(w*p[cp[2]]+(65536-w)*p[cp[3]])>>16;
        
# 873 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 873 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                       ;
      }
        break;
      case MIX: {

        int m=cp[3];
        
# 879 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 879 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                           ;
        cr.cxt=h[i]+(c8&cp[5]);
        cr.cxt=(cr.cxt&(cr.c-1))*m;
        
# 882 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 882 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                     ;
        int* wt=(int*)&cr.cm[cr.cxt];
        p[i]=0;
        for (int j=0; j<m; ++j)
          p[i]+=(wt[j]>>8)*p[cp[2]+j];
        p[i]=clamp2k(p[i]>>8);
      }
        break;
      case ISSE: {
        
# 891 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 891 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                           ;
        if (c8==1 || (c8&0xf0)==16)
          cr.c=find(cr.ht, cp[1]+2, h[i]+16*c8);
        cr.cxt=cr.ht[cr.c+(hmap4&15)];
        int *wt=(int*)&cr.cm[cr.cxt*2];
        p[i]=clamp2k((wt[0]*p[cp[2]]+wt[1]*64)>>16);
      }
        break;
      case SSE: {
        cr.cxt=(h[i]+c8)*32;
        int pq=p[cp[2]]+992;
        if (pq<0) pq=0;
        if (pq>1983) pq=1983;
        int wt=pq&63;
        pq>>=6;
        
# 906 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 906 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                              ;
        cr.cxt+=pq;
        p[i]=stretch(((cr.cm(cr.cxt)>>10)*(64-wt)+(cr.cm(cr.cxt+1)>>10)*wt)>>13);
        cr.cxt+=wt>>5;
      }
        break;
      default:
        error("component predict not implemented");
    }
    cp+=compsize[cp[0]];
    
# 916 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 916 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                               ;
    
# 917 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 917 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                   ;
  }
  
# 919 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 919 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                    ;
  return squash(p[n-1]);
}


void Predictor::update0(int y) {
  
# 925 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 925 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                     ;
  
# 926 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 926 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                         ;
  
# 927 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 927 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                               ;


  const U8* cp=&z.header[7];
  int n=z.header[6];
  
# 932 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 932 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                       ;
  
# 933 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 933 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                  ;
  for (int i=0; i<n; ++i) {
    Component& cr=comp[i];
    switch(cp[0]) {
      case CONS:
        break;
      case CM:
        train(cr, y);
        break;
      case ICM: {
        cr.ht[cr.c+(hmap4&15)]=st.next(cr.ht[cr.c+(hmap4&15)], y);
        U32& pn=cr.cm(cr.cxt);
        pn+=int(y*32767-(pn>>8))>>2;
      }
        break;
      case MATCH:


      {
        
# 952 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 952 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                        ;
        
# 953 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 953 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                 ;
        
# 954 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 954 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                       ;
        
# 955 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 955 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                               ;
        
# 956 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 956 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                               ;
        
# 957 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 957 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                    ;
        if (int(cr.c)!=y) cr.a=0;
        cr.ht(cr.limit)+=cr.ht(cr.limit)+y;
        if (++cr.cxt==8) {
          cr.cxt=0;
          ++cr.limit;
          cr.limit&=(1<<cp[2])-1;
          if (cr.a==0) {
            cr.b=cr.limit-cr.cm(h[i]);
            if (cr.b&(cr.ht.size()-1))
              while (cr.a<255
                     && cr.ht(cr.limit-cr.a-1)==cr.ht(cr.limit-cr.a-cr.b-1))
                ++cr.a;
          }
          else cr.a+=cr.a<255;
          cr.cm(h[i])=cr.limit;
        }
      }
        break;
      case AVG:
        break;
      case MIX2: {

        
# 980 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 980 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                  ;
        
# 981 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 981 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                   ;
        int err=(y*32767-squash(p[i]))*cp[4]>>5;
        int w=cr.a16[cr.cxt];
        w+=(err*(p[cp[2]]-p[cp[3]])+(1<<12))>>13;
        if (w<0) w=0;
        if (w>65535) w=65535;
        cr.a16[cr.cxt]=w;
      }
        break;
      case MIX: {

        int m=cp[3];
        
# 993 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 993 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                          ;
        
# 994 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 994 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                   ;
        
# 995 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 995 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                     ;
        int err=(y*32767-squash(p[i]))*cp[4]>>4;
        int* wt=(int*)&cr.cm[cr.cxt];
        for (int j=0; j<m; ++j)
          wt[j]=clamp512k(wt[j]+((err*p[cp[2]+j]+(1<<12))>>13));
      }
        break;
      case ISSE: {
        
# 1003 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 1003 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                             ;
        int err=y*32767-squash(p[i]);
        int *wt=(int*)&cr.cm[cr.cxt*2];
        wt[0]=clamp512k(wt[0]+((err*p[cp[2]]+(1<<12))>>13));
        wt[1]=clamp512k(wt[1]+((err+16)>>5));
        cr.ht[cr.c+(hmap4&15)]=st.next(cr.cxt, y);
      }
        break;
      case SSE:
        train(cr, y);
        break;
      default:
        
# 1015 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 1015 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                ;
    }
    cp+=compsize[cp[0]];
    
# 1018 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
                                               
# 1019 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                              ;
  }
  
# 1021 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1021 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                    ;


  c8+=c8+y;
  if (c8>=256) {
    z.run(c8-256);
    hmap4=1;
    c8=1;
    for (int i=0; i<n; ++i) h[i]=z.H(i);
  }
  else if (c8>=16 && c8<32)
    hmap4=(hmap4&0xf)<<5|y<<4|1;
  else
    hmap4=(hmap4&0x1f0)|(((hmap4&0xf)*2+y)&0xf);
}





size_t Predictor::find(Array<U8>& ht, int sizebits, U32 cxt) {
  
# 1042 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1042 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                        ;
  int chk=cxt>>sizebits&255;
  size_t h0=(cxt*16)&(ht.size()-16);
  if (ht[h0]==chk) return h0;
  size_t h1=h0^16;
  if (ht[h1]==chk) return h1;
  size_t h2=h0^32;
  if (ht[h2]==chk) return h2;
  if (ht[h0+1]<=ht[h1+1] && ht[h0+1]<=ht[h2+1])
    return memset(&ht[h0], 0, 16), ht[h0]=chk, h0;
  else if (ht[h1+1]<ht[h2+1])
    return memset(&ht[h1], 0, 16), ht[h1]=chk, h1;
  else
    return memset(&ht[h2], 0, 16), ht[h2]=chk, h2;
}



Decoder::Decoder(ZPAQL& z):
    in(0), low(1), high(0xFFFFFFFF), curr(0), pr(z), buf(BUFSIZE) {
}

void Decoder::init() {
  pr.init();
  if (pr.isModeled()) low=1, high=0xFFFFFFFF, curr=0;
  else low=high=curr=0;
}



void Decoder::loadbuf() {
  
# 1073 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1073 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                        ;
  
# 1074 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1074 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                  ;
  if (curr==0) {
    for (int i=0; i<4; ++i) {
      int c=in->get();
      if (c<0) error("unexpected end of input");
      curr=curr<<8|c;
    }
  }
  U32 n=buf.size();
  if (n>curr) n=curr;
  high=in->read(&buf[0], n);
  curr-=high;
  low=0;
}


int Decoder::decode(int p) {
  
# 1091 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1091 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                        ;
  
# 1092 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1092 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                          ;
  if (curr<low || curr>high) error("archive corrupted");
  
# 1094 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1094 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                ;
  U32 mid=low+U32(((high-low)*U64(U32(p)))>>16);
  
# 1096 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1096 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                             ;
  int y=curr<=mid;
  if (y) high=mid; else low=mid+1;
  while ((high^low)<0x1000000) {
    high=high<<8|255;
    low=low<<8;
    low+=(low==0);
    int c=in->get();
    if (c<0) error("unexpected end of file");
    curr=curr<<8|c;
  }
  return y;
}


int Decoder::decompress() {
  if (pr.isModeled()) {
    if (curr==0) {
      for (int i=0; i<4; ++i)
        curr=curr<<8|in->get();
    }
    if (decode(0)) {
      if (curr!=0) error("decoding end of stream");
      return -1;
    }
    else {
      int c=1;
      while (c<256) {
        int p=pr.predict()*2+1;
        c+=c+decode(p);
        pr.update(c&1);
      }
      return c-256;
    }
  }
  else {
    if (low==high) loadbuf();
    if (low==high) return -1;
    return buf[low++]&255;
  }
}


int Decoder::skip() {
  int c=-1;
  if (pr.isModeled()) {
    while (curr==0)
      curr=in->get();
    while (curr && (c=in->get())>=0)
      curr=curr<<8|c;
    while ((c=in->get())==0) ;
    return c;
  }
  else {
    if (curr==0)
      for (int i=0; i<4 && (c=in->get())>=0; ++i) curr=curr<<8|c;
    while (curr>0) {
      U32 n=BUFSIZE;
      if (n>curr) n=curr;
      U32 n1=in->read(&buf[0], n);
      curr-=n1;
      if (n1!=n) return -1;
      if (curr==0)
        for (int i=0; i<4 && (c=in->get())>=0; ++i) curr=curr<<8|c;
    }
    if (c>=0) c=in->get();
    return c;
  }
}




void PostProcessor::init(int h, int m) {
  state=hsize=0;
  ph=h;
  pm=m;
  z.clear();
}



int PostProcessor::write(int c) {
  
# 1179 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1179 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                        ;
  switch (state) {
    case 0:
      if (c<0) error("Unexpected EOS");
      state=c+1;
      if (state>2) error("unknown post processing type");
      if (state==1) z.clear();
      break;
    case 1:
      z.outc(c);
      break;
    case 2:
      if (c<0) error("Unexpected EOS");
      hsize=c;
      state=3;
      break;
    case 3:
      if (c<0) error("Unexpected EOS");
      hsize+=c*256;
      z.header.resize(hsize+300);
      z.cend=8;
      z.hbegin=z.hend=z.cend+128;
      z.header[4]=ph;
      z.header[5]=pm;
      state=4;
      break;
    case 4:
      if (c<0) error("Unexpected EOS");
      
# 1207 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
     (static_cast<void> (0))
# 1207 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                    ;
      z.header[z.hend++]=c;
      if (z.hend-z.hbegin==hsize) {
        hsize=z.cend-2+z.hend-z.hbegin;
        z.header[0]=hsize&255;
        z.header[1]=hsize>>8;
        z.initp();
        state=5;
      }
      break;
    case 5:
      z.run(c);
      if (c<0) z.flush();
      break;
  }
  return state;
}





bool Decompresser::findBlock(double* memptr) {
  
# 1230 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1230 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                     ;


  U32 h1=0x3D49B113, h2=0x29EB7F93, h3=0x2614BE13, h4=0x3828EB13;

  int c;
  while ((c=dec.in->get())!=-1) {
    h1=h1*12+c;
    h2=h2*20+c;
    h3=h3*28+c;
    h4=h4*44+c;
    if (h1==0xB16B88F1 && h2==0xFF5376F1 && h3==0x72AC5BF1 && h4==0x2F909AF1)
      break;
  }
  if (c==-1) return false;


  if ((c=dec.in->get())!=1 && c!=2) error("unsupported ZPAQ level");
  if (dec.in->get()!=1) error("unsupported ZPAQL type");
  z.read(dec.in);
  if (c==1 && z.header.isize()>6 && z.header[6]==0)
    error("ZPAQ level 1 requires at least 1 component");
  if (memptr) *memptr=z.memory();
  state=FILENAME;
  decode_state=FIRSTSEG;
  return true;
}



bool Decompresser::findFilename(Writer* filename) {
  
# 1261 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1261 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                        ;
  int c=dec.in->get();
  if (c==1) {
    while (true) {
      c=dec.in->get();
      if (c==-1) error("unexpected EOF");
      if (c==0) {
        state=COMMENT;
        return true;
      }
      if (filename) filename->put(c);
    }
  }
  else if (c==255) {
    state=BLOCK;
    return false;
  }
  else
    error("missing segment or end of block");
  return false;
}


void Decompresser::readComment(Writer* comment) {
  
# 1285 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1285 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                       ;
  state=DATA;
  while (true) {
    int c=dec.in->get();
    if (c==-1) error("unexpected EOF");
    if (c==0) break;
    if (comment) comment->put(c);
  }
  if (dec.in->get()!=0) error("missing reserved byte");
}


bool Decompresser::decompress(int n) {
  
# 1298 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1298 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                    ;
  
# 1299 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1299 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                           ;


  if (decode_state==FIRSTSEG) {
    dec.init();
    
# 1304 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 1304 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                            ;
    pp.init(z.header[4], z.header[5]);
    decode_state=SEG;
  }


  while ((pp.getState()&3)!=1)
    pp.write(dec.decompress());


  while (n) {
    int c=dec.decompress();
    pp.write(c);
    if (c==-1) {
      state=SEGEND;
      return false;
    }
    if (n>0) --n;
  }
  return true;
}




void Decompresser::readSegmentEnd(char* sha1string) {
  
# 1330 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1330 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                     ;


  int c=0;
  if (state==DATA) {
    c=dec.skip();
    decode_state=SKIP;
  }
  else if (state==SEGEND)
    c=dec.in->get();
  state=FILENAME;


  if (c==254) {
    if (sha1string) sha1string[0]=0;
  }
  else if (c==253) {
    if (sha1string) sha1string[0]=1;
    for (int i=1; i<=20; ++i) {
      c=dec.in->get();
      if (sha1string) sha1string[i]=c;
    }
  }
  else
    error("missing end of segment marker");
}



void decompress(Reader* in, Writer* out) {
  Decompresser d;
  d.setInput(in);
  d.setOutput(out);
  while (d.findBlock()) {
    while (d.findFilename()) {
      d.readComment();
      d.decompress();
      d.readSegmentEnd();
    }
  }
}




void Encoder::init() {
  low=1;
  high=0xFFFFFFFF;
  pr.init();
  if (!pr.isModeled()) low=0, buf.resize(1<<16);
}


void Encoder::encode(int y, int p) {
  
# 1384 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1384 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
            ;
  
# 1385 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1385 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                        ;
  
# 1386 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1386 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                     ;
  
# 1387 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1387 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                          ;
  U32 mid=low+U32(((high-low)*U64(U32(p)))>>16);
  
# 1389 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1389 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                             ;
  if (y) high=mid; else low=mid+1;
  while ((high^low)<0x1000000) {
    out->put(high>>24);
    high=high<<8|255;
    low=low<<8;
    low+=(low==0);
  }
}


void Encoder::compress(int c) {
  
# 1401 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1401 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
            ;
  if (pr.isModeled()) {
    if (c==-1)
      encode(1, 0);
    else {
      
# 1406 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
     (static_cast<void> (0))
# 1406 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                           ;
      encode(0, 0);
      for (int i=7; i>=0; --i) {
        int p=pr.predict()*2+1;
        
# 1410 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 1410 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                             ;
        int y=c>>i&1;
        encode(y, p);
        pr.update(y);
      }
    }
  }
  else {
    if (c<0 || low==buf.size()) {
      out->put((low>>24)&255);
      out->put((low>>16)&255);
      out->put((low>>8)&255);
      out->put(low&255);
      out->write(&buf[0], low);
      low=0;
    }
    if (c>=0) buf[low++]=c;
  }
}





void Compressor::writeTag() {
  
# 1435 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1435 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                    ;
  enc.out->put(0x37);
  enc.out->put(0x6b);
  enc.out->put(0x53);
  enc.out->put(0x74);
  enc.out->put(0xa0);
  enc.out->put(0x31);
  enc.out->put(0x83);
  enc.out->put(0xd3);
  enc.out->put(0x8c);
  enc.out->put(0xb2);
  enc.out->put(0x28);
  enc.out->put(0xb0);
  enc.out->put(0xd3);
}

void Compressor::startBlock(int level) {


  static const char models[]={
  26,0,1,2,0,0,2,3,16,8,19,0,0,96,4,28,
  59,10,59,112,25,10,59,10,59,112,56,0,


  69,0,3,3,0,0,8,3,5,8,13,0,8,17,1,8,
  18,2,8,18,3,8,19,4,4,22,24,7,16,0,7,24,
  (char)-1,0,17,104,74,4,95,1,59,112,10,25,59,112,10,25,
  59,112,10,25,59,112,10,25,59,112,10,25,59,10,59,112,
  25,69,(char)-49,8,112,56,0,


  (char)-60,0,5,9,0,0,22,1,(char)-96,3,5,8,13,1,8,16,
  2,8,18,3,8,19,4,8,19,5,8,20,6,4,22,24,
  3,17,8,19,9,3,13,3,13,3,13,3,14,7,16,0,
  15,24,(char)-1,7,8,0,16,10,(char)-1,6,0,15,16,24,0,9,
  8,17,32,(char)-1,6,8,17,18,16,(char)-1,9,16,19,32,(char)-1,6,
  0,19,20,16,0,0,17,104,74,4,95,2,59,112,10,25,
  59,112,10,25,59,112,10,25,59,112,10,25,59,112,10,25,
  59,10,59,112,10,25,59,112,10,25,69,(char)-73,32,(char)-17,64,47,
  14,(char)-25,91,47,10,25,60,26,48,(char)-122,(char)-105,20,112,63,9,70,
  (char)-33,0,39,3,25,112,26,52,25,25,74,10,4,59,112,25,
  10,4,59,112,25,10,4,59,112,25,65,(char)-113,(char)-44,72,4,59,
  112,8,(char)-113,(char)-40,8,68,(char)-81,60,60,25,69,(char)-49,9,112,25,25,
  25,25,25,112,56,0,

  0,0};

  if (level<1) error("compression level must be at least 1");
  const char* p=models;
  int i;
  for (i=1; i<level && toU16(p); ++i)
    p+=toU16(p)+2;
  if (toU16(p)<1) error("compression level too high");
  startBlock(p);
}


class MemoryReader: public Reader {
  const char* p;
public:
  MemoryReader(const char* p_): p(p_) {}
  int get() {return *p++&255;}
};


void Compressor::startBlock(const char* hcomp) {
  
# 1501 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1501 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                    ;
  
# 1502 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1502 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
              ;
  int len=toU16(hcomp)+2;
  enc.out->put('z');
  enc.out->put('P');
  enc.out->put('Q');
  enc.out->put(1+(len>6 && hcomp[6]==0));
  enc.out->put(1);
  for (int i=0; i<len; ++i)
    enc.out->put(hcomp[i]);
  MemoryReader m(hcomp);
  z.read(&m);
  state=BLOCK1;
}


void Compressor::startSegment(const char* filename, const char* comment) {
  
# 1518 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1518 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                       ;
  enc.out->put(1);
  while (filename && *filename)
    enc.out->put(*filename++);
  enc.out->put(0);
  while (comment && *comment)
    enc.out->put(*comment++);
  enc.out->put(0);
  enc.out->put(0);
  if (state==BLOCK1) state=SEG1;
  if (state==BLOCK2) state=SEG2;
}



void Compressor::postProcess(const char* pcomp, int len) {
  
# 1534 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1534 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                    ;
  enc.init();
  if (pcomp) {
    enc.compress(1);
    if (len<=0) {
      len=toU16(pcomp);
      pcomp+=2;
    }
    enc.compress(len&255);
    enc.compress((len>>8)&255);
    for (int i=0; i<len; ++i)
      enc.compress(pcomp[i]&255);
  }
  else
    enc.compress(0);
  state=SEG2;
}


bool Compressor::compress(int n) {
  
# 1554 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1554 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                    ;
  int ch=0;
  while (n && (ch=in->get())>=0) {
    enc.compress(ch);
    if (n>0) --n;
  }
  return ch>=0;
}


void Compressor::endSegment(const char* sha1string) {
  
# 1565 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1565 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                    ;
  enc.compress(-1);
  enc.out->put(0);
  enc.out->put(0);
  enc.out->put(0);
  enc.out->put(0);
  if (sha1string) {
    enc.out->put(253);
    for (int i=0; i<20; ++i)
      enc.out->put(sha1string[i]);
  }
  else
    enc.out->put(254);
  state=BLOCK2;
}


void Compressor::endBlock() {
  
# 1583 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1583 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                      ;
  enc.out->put(255);
  state=INIT;
}



void compress(Reader* in, Writer* out, int level) {
  
# 1591 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1591 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                 ;
  Compressor c;
  c.setInput(in);
  c.setOutput(out);
  c.startBlock(level);
  c.startSegment();
  c.postProcess();
  c.compress();
  c.endSegment();
  c.endBlock();
}
# 1730 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
static void flush1(ZPAQL* z) {
  z->flush();
}


static bool iserr(int op) {
  return op==0 || (op>=120 && op<=127) || (op>=240 && op<=254)
    || op==58 || (op<64 && (op%8==5 || op%8==6));
}


static void put(U8* rcode, int n, int& o, U32 x, int k) {
  while (k-->0) {
    if (o<n) rcode[o]=(x>>(k*8))&255;
    ++o;
  }
}


static void put4lsb(U8* rcode, int n, int& o, U32 x) {
  for (int k=0; k<4; ++k) {
    if (o<n) rcode[o]=(x>>(k*8))&255;
    ++o;
  }
}
# 1779 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
int ZPAQL::assemble() {


  const int S=sizeof(char*);
  U32 t=0x12345678;
  if (*(char*)&t!=0x78 || (S!=4 && S!=8))
    error("JIT supported only for x86-32 and x86-64");

  const U8* hcomp=&header[hbegin];
  const int hlen=hend-hbegin+1;
  const int msize=m.size();
  const int hsize=h.size();
  const int regcode[8]={2,6,7,5};
  Array<int> it(hlen);
  int done=0;
  int o=5;


  const int halt=o;
  if (S==8) {
    put(rcode, rcode_size, o, (0x48b9), 2), t=U32(size_t(&a)), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&a)>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8911), 2);
    put(rcode, rcode_size, o, (0x48b9), 2), t=U32(size_t(&b)), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&b)>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8931), 2);
    put(rcode, rcode_size, o, (0x48b9), 2), t=U32(size_t(&c)), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&c)>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8939), 2);
    put(rcode, rcode_size, o, (0x48b9), 2), t=U32(size_t(&d)), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&d)>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8929), 2);
    put(rcode, rcode_size, o, (0x48b9), 2), t=U32(size_t(&f)), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&f)>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8919), 2);
    put(rcode, rcode_size, o, (0x4883c438), 4);
    put(rcode, rcode_size, o, (0x415f), 2);
    put(rcode, rcode_size, o, (0x415e), 2);
    put(rcode, rcode_size, o, (0x415d), 2);
    put(rcode, rcode_size, o, (0x415c), 2);
  }
  else {
    put(rcode, rcode_size, o, (0x8915), 2), t=U32(size_t(&a)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8935), 2), t=U32(size_t(&b)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x893d), 2), t=U32(size_t(&c)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x892d), 2), t=U32(size_t(&d)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x891d), 2), t=U32(size_t(&f)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x83c43c), 3);
  }
  put(rcode, rcode_size, o, (0x5d), 1);
  put(rcode, rcode_size, o, (0x5b), 1);
  put(rcode, rcode_size, o, (0x5f), 1);
  put(rcode, rcode_size, o, (0x5e), 1);
  put(rcode, rcode_size, o, (0xc3), 1);



  const int outlabel=o;
  if (S==8) {
    put(rcode, rcode_size, o, (0x48b8), 2), t=U32(size_t(&outbuf[0])), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&outbuf[0])>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x49ba), 2), t=U32(size_t(&bufptr)), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&bufptr)>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x418b0a), 3);
    put(rcode, rcode_size, o, (0x891408), 3);
    put(rcode, rcode_size, o, (0xffc1), 2);
    put(rcode, rcode_size, o, (0x41890a), 3);
    put(rcode, rcode_size, o, (0x81f9), 2), t=U32(size_t(outbuf.size())), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x7401), 2);
    put(rcode, rcode_size, o, (0xc3), 1);
    put(rcode, rcode_size, o, (0x4883ec30), 4);
    put(rcode, rcode_size, o, (0x48893c24), 4);
    put(rcode, rcode_size, o, (0x48897424), 4), put(rcode, rcode_size, o, (8), 1);
    put(rcode, rcode_size, o, (0x48895424), 4), put(rcode, rcode_size, o, (16), 1);
    put(rcode, rcode_size, o, (0x48894c24), 4), put(rcode, rcode_size, o, (24), 1);

    put(rcode, rcode_size, o, (0x48bf), 2), t=U32(size_t(this)), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(this)>>(S*4)), put4lsb(rcode, rcode_size, o, t);



    put(rcode, rcode_size, o, (0x49bb), 2), t=U32(size_t(&flush1)), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&flush1)>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x41ffd3), 3);
    put(rcode, rcode_size, o, (0x488b4c24), 4), put(rcode, rcode_size, o, (24), 1);
    put(rcode, rcode_size, o, (0x488b5424), 4), put(rcode, rcode_size, o, (16), 1);
    put(rcode, rcode_size, o, (0x488b7424), 4), put(rcode, rcode_size, o, (8), 1);
    put(rcode, rcode_size, o, (0x488b3c24), 4);
    put(rcode, rcode_size, o, (0x4883c430), 4);
    put(rcode, rcode_size, o, (0xc3), 1);
  }
  else {
    put(rcode, rcode_size, o, (0xb8), 1), t=U32(size_t(&outbuf[0])), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8b0d), 2), t=U32(size_t(&bufptr)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x891408), 3);
    put(rcode, rcode_size, o, (0xffc1), 2);
    put(rcode, rcode_size, o, (0x890d), 2), t=U32(size_t(&bufptr)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x81f9), 2), t=U32(size_t(outbuf.size())), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x7401), 2);
    put(rcode, rcode_size, o, (0xc3), 1);
    put(rcode, rcode_size, o, (0x83ec08), 3);
    put(rcode, rcode_size, o, (0x89542404), 4);
    put(rcode, rcode_size, o, (0xc70424), 3), t=U32(size_t(this)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0xb8), 1), t=U32(size_t(&flush1)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0xffd0), 2);
    put(rcode, rcode_size, o, (0x8b542404), 4);
    put(rcode, rcode_size, o, (0x83c408), 3);
    put(rcode, rcode_size, o, (0xc3), 1);
  }



  it[0]=2;
  
# 1883 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1883 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                   ;
  do {
    done=0;
    const int NONE=0x80000000;
    for (int i=0; i<hlen; ++i) {
      int op=hcomp[i];
      if (it[i]) {
        int next1=i+1+(op%8==7), next2=NONE;
        if (iserr(op)) next1=NONE;
        if (op==56) next1=NONE, next2=0;
        if (op==255) next1=NONE, next2=hcomp[i+1]+256*hcomp[i+2];
        if (op==39||op==47||op==63)next2=i+2+(hcomp[i+1]<<24>>24);
        if (op==63) next1=NONE;
        if ((next2<0 || next2>=hlen) && next2!=NONE) next2=hlen-1;
        if (next1!=NONE && !(it[next1]&1)) it[next1]|=1, ++done;
        if (next2!=NONE && !(it[next2]&2)) it[next2]|=2, ++done;
      }
    }
  } while (done>0);
# 1912 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
  for (int i=0; i<hlen; ++i) {
    const int op1=hcomp[i];
    const int i2=i+1+(op1%8==7);
    const int op2=hcomp[i2];
    if (it[i] && op1>=216 && op1<240 && (op2==39 || op2==47)
        && it[i2]==1 && (i2==i+1 || it[i+1]==0)) {
      int code=(op1-208)/8*4;
      it[i2]+=code;
      for (int j=0; j<2 && code; ++j) {
        int k=i2+2;
        if (j==1) k=i2+2+(hcomp[i2+1]<<24>>24);
        for (int l=0; l<hlen && code; ++l) {
          if (k<0 || k>=hlen) break;
          const int op=hcomp[k];
          if (op==39 || op==47) code=0;
          else if (op>=216 && op<240) break;
          else if (iserr(op)) break;
          else if (op==255) k=hcomp[k+1]+256*hcomp[k+2];
          else if (op==63) k=k+2+(hcomp[k+1]<<24>>24);
          else if (op==56) k=0;
          else k=k+1+(op%8==7);
        }
      }
      it[i]+=code;
    }
  }


  const int start=o;
  
# 1941 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 1941 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                  ;
  put(rcode, rcode_size, o, (0x56), 1);
  put(rcode, rcode_size, o, (0x57), 1);
  put(rcode, rcode_size, o, (0x53), 1);
  put(rcode, rcode_size, o, (0x55), 1);
  if (S==8) {
    put(rcode, rcode_size, o, (0x4154), 2);
    put(rcode, rcode_size, o, (0x4155), 2);
    put(rcode, rcode_size, o, (0x4156), 2);
    put(rcode, rcode_size, o, (0x4157), 2);
    put(rcode, rcode_size, o, (0x4883ec38), 4);
    put(rcode, rcode_size, o, (0x48b8), 2), t=U32(size_t(&a)), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&a)>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8b10), 2);
    put(rcode, rcode_size, o, (0x48b8), 2), t=U32(size_t(&b)), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&b)>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8b30), 2);
    put(rcode, rcode_size, o, (0x48b8), 2), t=U32(size_t(&c)), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&c)>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8b38), 2);
    put(rcode, rcode_size, o, (0x48b8), 2), t=U32(size_t(&d)), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&d)>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8b28), 2);
    put(rcode, rcode_size, o, (0x48b8), 2), t=U32(size_t(&f)), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&f)>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8b18), 2);
    put(rcode, rcode_size, o, (0x49bc), 2), t=U32(size_t(&h[0])), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&h[0])>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x49bd), 2), t=U32(size_t(&outbuf[0])), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&outbuf[0])>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x49be), 2), t=U32(size_t(&r[0])), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&r[0])>>(S*4)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x49bf), 2), t=U32(size_t(&m[0])), put4lsb(rcode, rcode_size, o, t), t=U32(size_t(&m[0])>>(S*4)), put4lsb(rcode, rcode_size, o, t);
  }
  else {
    put(rcode, rcode_size, o, (0x83ec3c), 3);
    put(rcode, rcode_size, o, (0x8b15), 2), t=U32(size_t(&a)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8b35), 2), t=U32(size_t(&b)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8b3d), 2), t=U32(size_t(&c)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8b2d), 2), t=U32(size_t(&d)), put4lsb(rcode, rcode_size, o, t);
    put(rcode, rcode_size, o, (0x8b1d), 2), t=U32(size_t(&f)), put4lsb(rcode, rcode_size, o, t);
  }


  for (int istart=0; istart<hlen; ++istart) {
    for (int i=istart; i<hlen&&it[i]; i=i+1+(hcomp[i]%8==7)+(hcomp[i]==255)) {
      const int code=it[i];


      U32 t;
      
# 1983 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
     (static_cast<void> (0))
# 1983 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                         ;
      
# 1984 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
     (static_cast<void> (0))
# 1984 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                           ;
      if (code>=16) {
        if (i>istart) {
          int a=code-o;
          if (a>-120 && a<120)
            put(rcode, rcode_size, o, (0xeb00+((a-2)&255)), 2);
          else
            put(rcode, rcode_size, o, (0xe9), 1), t=U32(size_t(a-5)), put4lsb(rcode, rcode_size, o, t);
        }
        break;
      }


      else {
        
# 1998 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 1998 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                   ;
        
# 1999 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 1999 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                  ;
        
# 2000 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 2000 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                    ;
        it[i]=o;
        ++done;
        const int op=hcomp[i];
        const int arg=hcomp[i+1]+((op==255)?256*hcomp[i+2]:0);
        const int ddd=op/8%8;
        const int sss=op%8;


        if (iserr(op)) {
          put(rcode, rcode_size, o, (0x31c0), 2);
          put(rcode, rcode_size, o, (0xe9), 1), t=U32(size_t(halt-o-4)), put4lsb(rcode, rcode_size, o, t);
          continue;
        }




        if (op==59 || (op>=64 && op<240 && op%8>=4 && op%8<7)) {
          put(rcode, rcode_size, o, (0x89c0+8*regcode[sss-3+(op==59)]), 2);
          const int sz=(sss==6?hsize:msize)-1;
          if (sz>=128) put(rcode, rcode_size, o, (0x25), 1), t=U32(size_t(sz)), put4lsb(rcode, rcode_size, o, t);
          else put(rcode, rcode_size, o, (0x83e000+sz), 3);
          const int move=(op>=64 && op<112);
          if (sss<6) {
            if (S==8) put(rcode, rcode_size, o, (0x410fb604+8*move*regcode[ddd]), 4), put(rcode, rcode_size, o, (0x07), 1);

            else put(rcode, rcode_size, o, (0x0fb680+8*move*regcode[ddd]), 3), t=U32(size_t(&m[0])), put4lsb(rcode, rcode_size, o, t);

          }
          else if ((0x06587000>>(op/8))&1) {
            if (S==8) put(rcode, rcode_size, o, (0x418b0484), 4);
            else put(rcode, rcode_size, o, (0x8b0485), 3), t=U32(size_t(&h[0])), put4lsb(rcode, rcode_size, o, t);
          }
        }


        if ((op>=32 && op<56 && op%8<5) || (op>=96 && op<120) || op==60) {
          put(rcode, rcode_size, o, (0x89c1+8*regcode[op/8%8-3-(op==60)]), 2);
          const int sz=(ddd==6||op==60?hsize:msize)-1;
          if (sz>=128) put(rcode, rcode_size, o, (0x81e1), 2), t=U32(size_t(sz)), put4lsb(rcode, rcode_size, o, t);
          else put(rcode, rcode_size, o, (0x83e100+sz), 3);
          if (op/8%8==6 || op==60) {
            if (S==8) put(rcode, rcode_size, o, (0x498d0c8c), 4);
            else put(rcode, rcode_size, o, (0x8d0c8d), 3), t=U32(size_t(&h[0])), put4lsb(rcode, rcode_size, o, t);
          }
          else {
            if (S==8) put(rcode, rcode_size, o, (0x498d0c0f), 4);
            else put(rcode, rcode_size, o, (0x8d89), 2), t=U32(size_t(&m[0])), put4lsb(rcode, rcode_size, o, t);
          }
        }


        switch((op/8)&31) {
          case 0:
          case 1:
          case 2:
          case 3:
            switch(sss) {
              case 0:
                put(rcode, rcode_size, o, (0x87d0+regcode[ddd]), 2);
                break;
              case 1:
                put(rcode, rcode_size, o, (0xffc0+regcode[ddd]), 2);
                break;
              case 2:
                put(rcode, rcode_size, o, (0xffc8+regcode[ddd]), 2);
                break;
              case 3:
                put(rcode, rcode_size, o, (0xf7d0+regcode[ddd]), 2);
                break;
              case 4:
                put(rcode, rcode_size, o, (0x31c0+9*regcode[ddd]), 2);
                break;
              case 7:
                if (S==8)
                  put(rcode, rcode_size, o, (0x418b86+8*regcode[ddd]), 3), t=U32(size_t(arg*4)), put4lsb(rcode, rcode_size, o, t);
                else
                  put(rcode, rcode_size, o, (0x8b05+8*regcode[ddd]), 2), t=U32(size_t((&r[arg]))), put4lsb(rcode, rcode_size, o, t);
                break;
            }
            break;
          case 4:
          case 5:
            switch(sss) {
              case 0:
                put(rcode, rcode_size, o, (0x8611), 2);
                break;
              case 1:
                put(rcode, rcode_size, o, (0xfe01), 2);
                break;
              case 2:
                put(rcode, rcode_size, o, (0xfe09), 2);
                break;
              case 3:
                put(rcode, rcode_size, o, (0xf611), 2);
                break;
              case 4:
                put(rcode, rcode_size, o, (0x31c0), 2);
                put(rcode, rcode_size, o, (0x8801), 2);
                break;
              case 7:
              {
                
# 2103 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
               (static_cast<void> (0))
# 2103 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                         ;
                const int jtab[2][4]={{5,4,2,7},{4,5,3,6}};

                if (code<4) put(rcode, rcode_size, o, (0x84db), 2);
                if (arg>=128 && arg-257-i>=0 && o-it[arg-257-i]<120)
                  put(rcode, rcode_size, o, (0x7000+256*jtab[op==47][code/4]), 2);
                else
                  put(rcode, rcode_size, o, (0x0f80+jtab[op==47][code/4]), 2), t=U32(size_t(0)), put4lsb(rcode, rcode_size, o, t);
                break;
              }
            }
            break;
          case 6:
            switch(sss) {
              case 0:
                put(rcode, rcode_size, o, (0x8711), 2);
                break;
              case 1:
                put(rcode, rcode_size, o, (0xff01), 2);
                break;
              case 2:
                put(rcode, rcode_size, o, (0xff09), 2);
                break;
              case 3:
                put(rcode, rcode_size, o, (0xf711), 2);
                break;
              case 4:
                put(rcode, rcode_size, o, (0x31c0), 2);
                put(rcode, rcode_size, o, (0x8901), 2);
                break;
              case 7:
                if (S==8)
                  put(rcode, rcode_size, o, (0x418996), 3), t=U32(size_t(arg*4)), put4lsb(rcode, rcode_size, o, t);
                else
                  put(rcode, rcode_size, o, (0x8915), 2), t=U32(size_t(&r[arg])), put4lsb(rcode, rcode_size, o, t);
                break;
            }
            break;
          case 7:
            switch(op) {
              case 56:
                put(rcode, rcode_size, o, (0xb8), 1), t=U32(size_t(1)), put4lsb(rcode, rcode_size, o, t);
                put(rcode, rcode_size, o, (0xe9), 1), t=U32(size_t(halt-o-4)), put4lsb(rcode, rcode_size, o, t);
                break;
              case 57:
                put(rcode, rcode_size, o, (0xe8), 1), t=U32(size_t(outlabel-o-4)), put4lsb(rcode, rcode_size, o, t);
                break;
              case 59:
                put(rcode, rcode_size, o, (0x8d8410), 3), t=U32(size_t(512)), put4lsb(rcode, rcode_size, o, t);
                put(rcode, rcode_size, o, (0x69d0), 2), t=U32(size_t(773)), put4lsb(rcode, rcode_size, o, t);
                break;
              case 60:
                put(rcode, rcode_size, o, (0x8b01), 2);
                put(rcode, rcode_size, o, (0x8d8410), 3), t=U32(size_t(512)), put4lsb(rcode, rcode_size, o, t);
                put(rcode, rcode_size, o, (0x69c0), 2), t=U32(size_t(773)), put4lsb(rcode, rcode_size, o, t);
                put(rcode, rcode_size, o, (0x8901), 2);
                break;
              case 63:
                put(rcode, rcode_size, o, (0xe9), 1), t=U32(size_t(0)), put4lsb(rcode, rcode_size, o, t);
                break;
            }
            break;
          case 8:
          case 9:
          case 10:
          case 11:
            if (sss==7)
              put(rcode, rcode_size, o, (0xb8+regcode[ddd]), 1), t=U32(size_t(arg)), put4lsb(rcode, rcode_size, o, t);
            else if (sss==6) {
              if (S==8)
                put(rcode, rcode_size, o, (0x418b0484+(regcode[ddd]<<11)), 4);
              else
                put(rcode, rcode_size, o, (0x8b0485+(regcode[ddd]<<11)), 3), t=U32(size_t(&h[0])), put4lsb(rcode, rcode_size, o, t);
            }
            else if (sss<4)
              put(rcode, rcode_size, o, (0x89c0+regcode[ddd]+8*regcode[sss]), 2);
            break;
          case 12:
          case 13:
            if (sss==7) put(rcode, rcode_size, o, (0xc60100+arg), 3);
            else if (sss==0) put(rcode, rcode_size, o, (0x8811), 2);
            else {
              if (sss<4) put(rcode, rcode_size, o, (0x89c0+8*regcode[sss]), 2);
              put(rcode, rcode_size, o, (0x8801), 2);
            }
            break;
          case 14:
            if (sss<7) put(rcode, rcode_size, o, (0x8901+8*regcode[sss]), 2);
            else put(rcode, rcode_size, o, (0xc701), 2), t=U32(size_t(arg)), put4lsb(rcode, rcode_size, o, t);
            break;
          case 15: break;
          case 16:
            if (sss==6) {
              if (S==8) put(rcode, rcode_size, o, (0x41031484), 4);
              else put(rcode, rcode_size, o, (0x031485), 3), t=U32(size_t(&h[0])), put4lsb(rcode, rcode_size, o, t);
            }
            else if (sss<7) put(rcode, rcode_size, o, (0x01c2+8*regcode[sss]), 2);
            else if (arg>128) put(rcode, rcode_size, o, (0x81c2), 2), t=U32(size_t(arg)), put4lsb(rcode, rcode_size, o, t);
            else put(rcode, rcode_size, o, (0x83c200+arg), 3);
            break;
          case 17:
            if (sss==6) {
              if (S==8) put(rcode, rcode_size, o, (0x412b1484), 4);
              else put(rcode, rcode_size, o, (0x2b1485), 3), t=U32(size_t(&h[0])), put4lsb(rcode, rcode_size, o, t);
            }
            else if (sss<7) put(rcode, rcode_size, o, (0x29c2+8*regcode[sss]), 2);
            else if (arg>=128) put(rcode, rcode_size, o, (0x81ea), 2), t=U32(size_t(arg)), put4lsb(rcode, rcode_size, o, t);
            else put(rcode, rcode_size, o, (0x83ea00+arg), 3);
            break;
          case 18:
            if (sss==6) {
              if (S==8) put(rcode, rcode_size, o, (0x410faf14), 4), put(rcode, rcode_size, o, (0x84), 1);
              else put(rcode, rcode_size, o, (0x0faf1485), 4), t=U32(size_t(&h[0])), put4lsb(rcode, rcode_size, o, t);
            }
            else if (sss<7) put(rcode, rcode_size, o, (0x0fafd0+regcode[sss]), 3);
            else if (arg>=128) put(rcode, rcode_size, o, (0x69d2), 2), t=U32(size_t(arg)), put4lsb(rcode, rcode_size, o, t);
            else put(rcode, rcode_size, o, (0x6bd200+arg), 3);
            break;
          case 19:
          case 20:
            if (sss<7) put(rcode, rcode_size, o, (0x89c1+8*regcode[sss]), 2);
            else put(rcode, rcode_size, o, (0xb9), 1), t=U32(size_t(arg)), put4lsb(rcode, rcode_size, o, t);
            put(rcode, rcode_size, o, (0x85c9), 2);
            put(rcode, rcode_size, o, (0x0f44d1), 3);
            put(rcode, rcode_size, o, (0x7408-2*(op/8==20)), 2);
            put(rcode, rcode_size, o, (0x89d0), 2);
            put(rcode, rcode_size, o, (0x31d2), 2);
            put(rcode, rcode_size, o, (0xf7f1), 2);
            if (op/8==19) put(rcode, rcode_size, o, (0x89c2), 2);
            break;
          case 21:
            if (sss==6) {
              if (S==8) put(rcode, rcode_size, o, (0x41231484), 4);
              else put(rcode, rcode_size, o, (0x231485), 3), t=U32(size_t(&h[0])), put4lsb(rcode, rcode_size, o, t);
            }
            else if (sss<7) put(rcode, rcode_size, o, (0x21c2+8*regcode[sss]), 2);
            else if (arg>=128) put(rcode, rcode_size, o, (0x81e2), 2), t=U32(size_t(arg)), put4lsb(rcode, rcode_size, o, t);
            else put(rcode, rcode_size, o, (0x83e200+arg), 3);
            break;
          case 22:
            if (sss==7) {
              if (arg<128) put(rcode, rcode_size, o, (0x83e200+(~arg&255)), 3);
              else put(rcode, rcode_size, o, (0x81e2), 2), t=U32(size_t(~arg)), put4lsb(rcode, rcode_size, o, t);
            }
            else {
              if (sss<4) put(rcode, rcode_size, o, (0x89c0+8*regcode[sss]), 2);
              put(rcode, rcode_size, o, (0xf7d0), 2);
              put(rcode, rcode_size, o, (0x21c2), 2);
            }
            break;
          case 23:
            if (sss==6) {
              if (S==8) put(rcode, rcode_size, o, (0x410b1484), 4);
              else put(rcode, rcode_size, o, (0x0b1485), 3), t=U32(size_t(&h[0])), put4lsb(rcode, rcode_size, o, t);
            }
            else if (sss<7) put(rcode, rcode_size, o, (0x09c2+8*regcode[sss]), 2);
            else if (arg>=128) put(rcode, rcode_size, o, (0x81ca), 2), t=U32(size_t(arg)), put4lsb(rcode, rcode_size, o, t);
            else put(rcode, rcode_size, o, (0x83ca00+arg), 3);
            break;
          case 24:
            if (sss==6) {
              if (S==8) put(rcode, rcode_size, o, (0x41331484), 4);
              else put(rcode, rcode_size, o, (0x331485), 3), t=U32(size_t(&h[0])), put4lsb(rcode, rcode_size, o, t);
            }
            else if (sss<7) put(rcode, rcode_size, o, (0x31c2+8*regcode[sss]), 2);
            else if (arg>=128) put(rcode, rcode_size, o, (0x81f2), 2), t=U32(size_t(arg)), put4lsb(rcode, rcode_size, o, t);
            else put(rcode, rcode_size, o, (0x83f200+arg), 3);
            break;
          case 25:
          case 26:
            if (sss==7)
              put(rcode, rcode_size, o, (0xc1e200+8*256*(op/8==26)+arg), 3);
            else {
              put(rcode, rcode_size, o, (0x89c1+8*regcode[sss]), 2);
              put(rcode, rcode_size, o, (0xd3e2+8*(op/8==26)), 2);
            }
            break;
          case 27:
          case 28:
          case 29:
            if (sss==6) {
              if (S==8) put(rcode, rcode_size, o, (0x413b1484), 4);
              else put(rcode, rcode_size, o, (0x3b1485), 3), t=U32(size_t(&h[0])), put4lsb(rcode, rcode_size, o, t);
            }
            else if (sss==7)
              put(rcode, rcode_size, o, (0x81fa), 2), t=U32(size_t(arg)), put4lsb(rcode, rcode_size, o, t);
            else
              put(rcode, rcode_size, o, (0x39c2+8*regcode[sss]), 2);
            if (code<4) {
              if (op/8==27) put(rcode, rcode_size, o, (0x0f94c3), 3);
              if (op/8==28) put(rcode, rcode_size, o, (0x0f92c3), 3);
              if (op/8==29) put(rcode, rcode_size, o, (0x0f97c3), 3);
            }
            break;
          case 30:
          case 31:
            if (op==255) put(rcode, rcode_size, o, (0xe9), 1), t=U32(size_t(0)), put4lsb(rcode, rcode_size, o, t);
            break;
        }
      }
    }
  }


  const int rsize=o;
  if (o>rcode_size) return rsize;


  for (int i=0; i<hlen; ++i) {
    if (it[i]<16) continue;
    int op=hcomp[i];
    if (op==39 || op==47 || op==63 || op==255) {
      int target=hcomp[i+1];
      if (op==255) target+=hcomp[i+2]*256;
      else {
        if (target>=128) target-=256;
        target+=i+2;
      }
      if (target<0 || target>=hlen) target=hlen-1;
      o=it[i];
      
# 2323 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
     (static_cast<void> (0))
# 2323 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                  ;
      if ((op==39 || op==47) && rcode[o]==0x84) o+=2;
      
# 2325 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
     (static_cast<void> (0))
# 2325 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                  ;
      if (rcode[o]==0x0f) ++o;
      
# 2327 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
     (static_cast<void> (0))
# 2327 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                         ;
      op=rcode[o++];
      target=it[target]-o;
      if ((op>=0x72 && op<0x78) || op==0xeb) {
        --target;
        if (target<-128 || target>127)
          error("Cannot code x86 short jump");
        
# 2334 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
       (static_cast<void> (0))
# 2334 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                           ;
        rcode[o]=target&255;
      }
      else if ((op>=0x82 && op<0x88) || op==0xe9)
      {
        target-=4;
        t=U32(size_t(target)), put4lsb(rcode, rcode_size, o, t);
      }
      else 
# 2342 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
          (static_cast<void> (0))
# 2342 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                       ;
    }
  }


  o=0;
  put(rcode, rcode_size, o, (0xe9), 1), t=U32(size_t(start-5)), put4lsb(rcode, rcode_size, o, t);
  return rsize;
}
# 2363 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
int Predictor::assemble_p() {
  Predictor& pr=*this;
  U8* rcode=pr.pcode;
  int rcode_size=pcode_size;
  int o=0;
  const int S=sizeof(char*);
  U8* hcomp=&pr.z.header[0];




  U32 t=0x12345678;
  if (*(char*)&t!=0x78 || (S!=4 && S!=8))
    error("JIT supported only for x86-32 and x86-64");


  put(rcode, rcode_size, o, (0xe9), 1), t=U32(size_t(5)), put4lsb(rcode, rcode_size, o, t);
  put(rcode, rcode_size, o, (0), 1), t=U32(size_t(0x90909000)), put4lsb(rcode, rcode_size, o, t);
  put(rcode, rcode_size, o, (0x53), 1);
  put(rcode, rcode_size, o, (0x55), 1);
  put(rcode, rcode_size, o, (0x56), 1);
  put(rcode, rcode_size, o, (0x57), 1);
  if (S==4)
    put(rcode, rcode_size, o, (0x8b7c2414), 4);
  else {



  }


  const int n=hcomp[6];
  U8* cp=hcomp+7;
  for (int i=0; i<n; ++i, cp+=compsize[cp[0]]) {
    if (cp-hcomp>=pr.z.cend) error("comp too big");
    if (cp[0]<1 || cp[0]>9) error("invalid component");
    
# 2399 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 2399 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                                 ;
    switch (cp[0]) {

      case CONS:
        break;

      case CM:




        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.h[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x3387), 2), t=U32(size_t(((char*)&(pr.hmap4)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x25), 1), t=U32(size_t((1<<cp[1])-1)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.comp[i].cxt)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8bb7), 2), t=U32(size_t(((char*)&(pr.comp[i].cm)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8b0486), 3);
        put(rcode, rcode_size, o, (0xc1e811), 3);
        put(rcode, rcode_size, o, (0x0fbf8447), 4), t=U32(size_t(((char*)&(pr.stretcht)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.p[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        break;

      case ISSE:







      case ICM:
# 2458 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8bb7), 2), t=U32(size_t(((char*)&(pr.comp[i].ht)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8b07), 2);
        put(rcode, rcode_size, o, (0x89c1), 2);
        put(rcode, rcode_size, o, (0x83f801), 3);
        put(rcode, rcode_size, o, (0x740a), 2);
        put(rcode, rcode_size, o, (0x25), 1), t=U32(size_t(240)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x83f810), 3);
        put(rcode, rcode_size, o, (0x7576), 2);

        put(rcode, rcode_size, o, (0xc1e104), 3);
        put(rcode, rcode_size, o, (0x038f), 2), t=U32(size_t(((char*)&(pr.h[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x89c8), 2);
        put(rcode, rcode_size, o, (0xc1e902+cp[1]), 3);
        put(rcode, rcode_size, o, (0x81e1), 2), t=U32(size_t(255)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0xc1e004), 3);
        put(rcode, rcode_size, o, (0x25), 1), t=U32(size_t((64<<cp[1])-16)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x3a0c06), 3);
        put(rcode, rcode_size, o, (0x744d), 2);
        put(rcode, rcode_size, o, (0x83f010), 3);
        put(rcode, rcode_size, o, (0x3a0c06), 3);
        put(rcode, rcode_size, o, (0x7445), 2);
        put(rcode, rcode_size, o, (0x83f030), 3);
        put(rcode, rcode_size, o, (0x3a0c06), 3);
        put(rcode, rcode_size, o, (0x743d), 2);

        put(rcode, rcode_size, o, (0x83f021), 3);
        put(rcode, rcode_size, o, (0x8a1c06), 3);
        put(rcode, rcode_size, o, (0x89c2), 2);
        put(rcode, rcode_size, o, (0x83f220), 3);
        put(rcode, rcode_size, o, (0x3a1c16), 3);
        put(rcode, rcode_size, o, (0x7708), 2);
        put(rcode, rcode_size, o, (0x83f230), 3);
        put(rcode, rcode_size, o, (0x3a1c16), 3);
        put(rcode, rcode_size, o, (0x7611), 2);

        put(rcode, rcode_size, o, (0x83f010), 3);
        put(rcode, rcode_size, o, (0x8a1c06), 3);
        put(rcode, rcode_size, o, (0x83f030), 3);
        put(rcode, rcode_size, o, (0x3a1c06), 3);
        put(rcode, rcode_size, o, (0x7303), 2);
        put(rcode, rcode_size, o, (0x83f030), 3);

        put(rcode, rcode_size, o, (0x83f001), 3);
        put(rcode, rcode_size, o, (0x890c06), 3);
        put(rcode, rcode_size, o, (0x31c9), 2);
        put(rcode, rcode_size, o, (0x894c0604), 4);
        put(rcode, rcode_size, o, (0x894c0608), 4);
        put(rcode, rcode_size, o, (0x894c060c), 4);

        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.comp[i].c)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0xeb06), 2);

        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.comp[i].c)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);

        put(rcode, rcode_size, o, (0x8b97), 2), t=U32(size_t(((char*)&(pr.hmap4)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x83e20f), 3);
        put(rcode, rcode_size, o, (0x01d0), 2);
        put(rcode, rcode_size, o, (0x0fb61406), 4);
        put(rcode, rcode_size, o, (0x8997), 2), t=U32(size_t(((char*)&(pr.comp[i].cxt)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8bb7), 2), t=U32(size_t(((char*)&(pr.comp[i].cm)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);




        if (cp[0]==ICM) {
          put(rcode, rcode_size, o, (0x8b0496), 3);
          put(rcode, rcode_size, o, (0xc1e808), 3);
          put(rcode, rcode_size, o, (0x0fbf8447), 4), t=U32(size_t(((char*)&(pr.stretcht)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        }
        else {
          put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.p[cp[2]])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0x0faf04d6), 4);
          put(rcode, rcode_size, o, (0x8b4cd604), 4);
          put(rcode, rcode_size, o, (0xc1e106), 3);
          put(rcode, rcode_size, o, (0x01c8), 2);
          put(rcode, rcode_size, o, (0xc1f810), 3);
          put(rcode, rcode_size, o, (0xb9), 1), t=U32(size_t(2047)), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0x39c8), 2);
          put(rcode, rcode_size, o, (0x0f4fc1), 3);
          put(rcode, rcode_size, o, (0xb9), 1), t=U32(size_t(-2048)), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0x39c8), 2);
          put(rcode, rcode_size, o, (0x0f4cc1), 3);

        }
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.p[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        break;

      case MATCH:
# 2561 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8bb7), 2), t=U32(size_t(((char*)&(pr.comp[i].ht)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);


        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.comp[i].a)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x85c0), 2);
        put(rcode, rcode_size, o, (0x7449), 2);


        put(rcode, rcode_size, o, (0xb9), 1), t=U32(size_t(7)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x2b8f), 2), t=U32(size_t(((char*)&(pr.comp[i].cxt)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.comp[i].limit)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x2b87), 2), t=U32(size_t(((char*)&(pr.comp[i].b)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x25), 1), t=U32(size_t((1<<cp[2])-1)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x0fb60406), 4);
        put(rcode, rcode_size, o, (0xd3e8), 2);
        put(rcode, rcode_size, o, (0x83e001), 3);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.comp[i].c)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);


        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.comp[i].a)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8b8487), 3), t=U32(size_t(((char*)&(pr.dt2k)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x7402), 2);
        put(rcode, rcode_size, o, (0xf7d8), 2);
        put(rcode, rcode_size, o, (0x25), 1), t=U32(size_t(0x7fff)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x0fbf8447), 4), t=U32(size_t(((char*)&(pr.stretcht)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.p[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        break;

      case AVG:


        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.p[cp[1]])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x2b87), 2), t=U32(size_t(((char*)&(pr.p[cp[2]])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x69c0), 2), t=U32(size_t(cp[3])), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0xc1f808), 3);
        put(rcode, rcode_size, o, (0x0387), 2), t=U32(size_t(((char*)&(pr.p[cp[2]])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.p[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        break;

      case MIX2:
# 2610 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
        put(rcode, rcode_size, o, (0x8b07), 2);
        put(rcode, rcode_size, o, (0x25), 1), t=U32(size_t(cp[5])), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x0387), 2), t=U32(size_t(((char*)&(pr.h[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x25), 1), t=U32(size_t((1<<cp[1])-1)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.comp[i].cxt)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8bb7), 2), t=U32(size_t(((char*)&(pr.comp[i].a16)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x0fb70446), 4);
        put(rcode, rcode_size, o, (0x8b8f), 2), t=U32(size_t(((char*)&(pr.p[cp[2]])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8b97), 2), t=U32(size_t(((char*)&(pr.p[cp[3]])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x29d1), 2);
        put(rcode, rcode_size, o, (0x0fafc8), 3);
        put(rcode, rcode_size, o, (0xc1e210), 3);
        put(rcode, rcode_size, o, (0x01d1), 2);
        put(rcode, rcode_size, o, (0xc1f910), 3);
        put(rcode, rcode_size, o, (0x898f), 2), t=U32(size_t(((char*)&(pr.p[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        break;

      case MIX:
# 2641 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
        put(rcode, rcode_size, o, (0x8b07), 2);
        put(rcode, rcode_size, o, (0x25), 1), t=U32(size_t(cp[5])), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x0387), 2), t=U32(size_t(((char*)&(pr.h[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x25), 1), t=U32(size_t((1<<cp[1])-1)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x69c0), 2), t=U32(size_t(cp[3])), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.comp[i].cxt)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8bb7), 2), t=U32(size_t(((char*)&(pr.comp[i].cm)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8d3486), 3);


        for (int k=0; k<cp[3]; k+=8) {
          const int tail=cp[3]-k;


          put(rcode, rcode_size, o, (0xf30f6f8e), 4), t=U32(size_t(k*4)), put4lsb(rcode, rcode_size, o, t);
          if (tail>3) put(rcode, rcode_size, o, (0xf30f6f96), 4), t=U32(size_t(k*4+16)), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0x660f72e1), 4), put(rcode, rcode_size, o, (0x08), 1);
          if (tail>3) put(rcode, rcode_size, o, (0x660f72e2), 4), put(rcode, rcode_size, o, (0x08), 1);
          put(rcode, rcode_size, o, (0x660f6bca), 4);
          put(rcode, rcode_size, o, (0xf30f6f9f), 4), t=U32(size_t(((char*)&(pr.p[cp[2]+k])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
          if (tail>3)
            put(rcode, rcode_size, o, (0xf30f6fa7), 4), t=U32(size_t(((char*)&(pr.p[cp[2]+k+4])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0x660f6bdc), 4);
          if (tail>0 && tail<8) {
            put(rcode, rcode_size, o, (0x660f76ed), 4);
            put(rcode, rcode_size, o, (0x660f73dd), 4), put(rcode, rcode_size, o, (16-tail*2), 1);
            put(rcode, rcode_size, o, (0x660fdbcd), 4);
          }
          if (k==0) {
            put(rcode, rcode_size, o, (0xf30f6fc1), 4);
            put(rcode, rcode_size, o, (0x660ff5c3), 4);
          }
          else {
            put(rcode, rcode_size, o, (0xf30f6fd1), 4);
            put(rcode, rcode_size, o, (0x660ff5d3), 4);
            put(rcode, rcode_size, o, (0x660ffec2), 4);
          }
        }


        put(rcode, rcode_size, o, (0xf30f6fc8), 4);
        put(rcode, rcode_size, o, (0x660f73d9), 4), put(rcode, rcode_size, o, (0x08), 1);
        put(rcode, rcode_size, o, (0x660ffec1), 4);
        put(rcode, rcode_size, o, (0xf30f6fc8), 4);
        put(rcode, rcode_size, o, (0x660f73d9), 4), put(rcode, rcode_size, o, (0x04), 1);
        put(rcode, rcode_size, o, (0x660ffec1), 4);
        put(rcode, rcode_size, o, (0x660f7ec0), 4);
        put(rcode, rcode_size, o, (0xc1f808), 3);
        put(rcode, rcode_size, o, (0xb9), 1), t=U32(size_t(2047)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x39c8), 2);
        put(rcode, rcode_size, o, (0x0f4fc1), 3);
        put(rcode, rcode_size, o, (0xf7d1), 2);
        put(rcode, rcode_size, o, (0x39c8), 2);
        put(rcode, rcode_size, o, (0x0f4cc1), 3);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.p[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        break;

      case SSE:
# 2714 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
        put(rcode, rcode_size, o, (0x8b8f), 2), t=U32(size_t(((char*)&(pr.h[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x030f), 2);
        put(rcode, rcode_size, o, (0x81e1), 2), t=U32(size_t((1<<cp[1])-1)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0xc1e105), 3);
        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.p[cp[2]])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x05), 1), t=U32(size_t(992)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x31d2), 2);
        put(rcode, rcode_size, o, (0x39d0), 2);
        put(rcode, rcode_size, o, (0x0f4cc2), 3);
        put(rcode, rcode_size, o, (0xba), 1), t=U32(size_t(1983)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x39d0), 2);
        put(rcode, rcode_size, o, (0x0f4fc2), 3);
        put(rcode, rcode_size, o, (0x89c2), 2);
        put(rcode, rcode_size, o, (0x83e23f), 3);
        put(rcode, rcode_size, o, (0xc1e806), 3);
        put(rcode, rcode_size, o, (0x01c1), 2);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8bb7), 2), t=U32(size_t(((char*)&(pr.comp[i].cm)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8b048e), 3);
        put(rcode, rcode_size, o, (0x8b5c8e04), 4);
        put(rcode, rcode_size, o, (0x83fa20), 3);
        put(rcode, rcode_size, o, (0x83d9ff), 3);
        put(rcode, rcode_size, o, (0x898f), 2), t=U32(size_t(((char*)&(pr.comp[i].cxt)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0xc1e80a), 3);
        put(rcode, rcode_size, o, (0xc1eb0a), 3);
        put(rcode, rcode_size, o, (0x29c3), 2);
        put(rcode, rcode_size, o, (0x0fafda), 3);
        put(rcode, rcode_size, o, (0xc1e006), 3);
        put(rcode, rcode_size, o, (0x01d8), 2);
        put(rcode, rcode_size, o, (0xc1e80d), 3);
        put(rcode, rcode_size, o, (0x0fbf8447), 4), t=U32(size_t(((char*)&(pr.stretcht)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.p[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        break;

      default:
        error("invalid ZPAQ component");
    }
  }


  put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.p[n-1])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
  put(rcode, rcode_size, o, (0x05), 1), t=U32(size_t(0x800)), put4lsb(rcode, rcode_size, o, t);
  put(rcode, rcode_size, o, (0x0fbf8447), 4), t=U32(size_t(((char*)&(pr.squasht[0])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
  put(rcode, rcode_size, o, (0x5f), 1);
  put(rcode, rcode_size, o, (0x5e), 1);
  put(rcode, rcode_size, o, (0x5d), 1);
  put(rcode, rcode_size, o, (0x5b), 1);
  put(rcode, rcode_size, o, (0xc3), 1);



  int save_o=o;
  o=5;
  put(rcode, rcode_size, o, (0xe9), 1), t=U32(size_t(save_o-10)), put4lsb(rcode, rcode_size, o, t);
  o=save_o;
  put(rcode, rcode_size, o, (0x53), 1);
  put(rcode, rcode_size, o, (0x55), 1);
  put(rcode, rcode_size, o, (0x56), 1);
  put(rcode, rcode_size, o, (0x57), 1);
  if (S==4) {
    put(rcode, rcode_size, o, (0x8b7c2414), 4);
    put(rcode, rcode_size, o, (0x8b6c2418), 4);
  }
  else {

    put(rcode, rcode_size, o, (0x4889f5), 3);




  }


  cp=hcomp+7;
  for (int i=0; i<n; ++i, cp+=compsize[cp[0]]) {
    
# 2789 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 2789 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                             ;
    
# 2790 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 2790 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                ;
    
# 2791 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
   (static_cast<void> (0))
# 2791 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                                                 ;
    switch (cp[0]) {

      case CONS:
        break;

      case SSE:
      case CM:
# 2809 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8bb7), 2), t=U32(size_t(((char*)&(pr.comp[i].cm)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.comp[i].cxt)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x25), 1), t=U32(size_t(pr.comp[i].cm.size()-1)), put4lsb(rcode, rcode_size, o, t);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8d3486), 3);
        put(rcode, rcode_size, o, (0x8b06), 2);
        put(rcode, rcode_size, o, (0x89c2), 2);
        put(rcode, rcode_size, o, (0xc1e811), 3);
        put(rcode, rcode_size, o, (0x89e9), 2);
        put(rcode, rcode_size, o, (0xc1e10f), 3);
        put(rcode, rcode_size, o, (0x29e9), 2);
        put(rcode, rcode_size, o, (0x29c1), 2);
        put(rcode, rcode_size, o, (0x81e2), 2), t=U32(size_t(0x3ff)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8b8497), 3), t=U32(size_t(((char*)&(pr.dt)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x0fafc8), 3);
        put(rcode, rcode_size, o, (0x81e1), 2), t=U32(size_t(0xfffffc00)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x81fa), 2), t=U32(size_t(cp[2+2*(cp[0]==SSE)]*4)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x110e), 2);
        break;

      case ICM:




      case ISSE:
# 2844 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
        put(rcode, rcode_size, o, (0x8b4700+((char*)&(pr.hmap4)-(char*)&pr)), 3);
        put(rcode, rcode_size, o, (0x83e00f), 3);
        put(rcode, rcode_size, o, (0x0387), 2), t=U32(size_t(((char*)&(pr.comp[i].c)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8bb7), 2), t=U32(size_t(((char*)&(pr.comp[i].ht)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x0fb61406), 4);
        put(rcode, rcode_size, o, (0x8d5c9500), 4);
        put(rcode, rcode_size, o, (0x0fb69c1f), 4), t=U32(size_t(((char*)&(pr.st)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x881c06), 3);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8bb7), 2), t=U32(size_t(((char*)&(pr.comp[i].cm)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);



        if (cp[0]==ICM) {
          if (S==8) put(rcode, rcode_size, o, (0x48), 1);
          put(rcode, rcode_size, o, (0x8d3496), 3);
          put(rcode, rcode_size, o, (0x8b06), 2);
          put(rcode, rcode_size, o, (0xc1e808), 3);
          put(rcode, rcode_size, o, (0x89e9), 2);
          put(rcode, rcode_size, o, (0xc1e10f), 3);
          put(rcode, rcode_size, o, (0x29e9), 2);
          put(rcode, rcode_size, o, (0x29c1), 2);
          put(rcode, rcode_size, o, (0xc1f902), 3);
          put(rcode, rcode_size, o, (0x010e), 2);
        }


        else {
          put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.p[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0x05), 1), t=U32(size_t(2048)), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0x0fb78447), 4), t=U32(size_t(((char*)&(pr.squasht)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0x89e9), 2);
          put(rcode, rcode_size, o, (0xc1e10f), 3);
          put(rcode, rcode_size, o, (0x29e9), 2);
          put(rcode, rcode_size, o, (0x29c1), 2);
          put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.p[cp[2]])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0x0fafc1), 3);
          put(rcode, rcode_size, o, (0x05), 1), t=U32(size_t((1<<12))), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0xc1f80d), 3);
          put(rcode, rcode_size, o, (0x0304d6), 3);
          put(rcode, rcode_size, o, (0xbb), 1), t=U32(size_t((1<<19)-1)), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0x39d8), 2);
          put(rcode, rcode_size, o, (0x0f4fc3), 3);
          put(rcode, rcode_size, o, (0xf7d3), 2);
          put(rcode, rcode_size, o, (0x39d8), 2);
          put(rcode, rcode_size, o, (0x0f4cc3), 3);
          put(rcode, rcode_size, o, (0x8904d6), 3);
          put(rcode, rcode_size, o, (0x83c110), 3);
          put(rcode, rcode_size, o, (0xc1f905), 3);
          put(rcode, rcode_size, o, (0x034cd604), 4);
          put(rcode, rcode_size, o, (0xb8), 1), t=U32(size_t((1<<19)-1)), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0x39c1), 2);
          put(rcode, rcode_size, o, (0x0f4fc8), 3);
          put(rcode, rcode_size, o, (0xf7d0), 2);
          put(rcode, rcode_size, o, (0x39c1), 2);
          put(rcode, rcode_size, o, (0x0f4cc8), 3);
          put(rcode, rcode_size, o, (0x894cd604), 4);
        }
        break;

      case MATCH:
# 2931 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8bb7), 2), t=U32(size_t(((char*)&(pr.comp[i].ht)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8b9f), 2), t=U32(size_t(((char*)&(pr.comp[i].cm)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);


        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.comp[i].c)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x39e8), 2);
        put(rcode, rcode_size, o, (0x7408), 2);
        put(rcode, rcode_size, o, (0x31c0), 2);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.comp[i].a)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);


        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.comp[i].limit)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x0fb60c06), 4);
        put(rcode, rcode_size, o, (0x01c9), 2);
        put(rcode, rcode_size, o, (0x01e9), 2);
        put(rcode, rcode_size, o, (0x880c06), 3);


        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.comp[i].cxt)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0xffc0), 2);
        put(rcode, rcode_size, o, (0x83e007), 3);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.comp[i].cxt)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x0f85), 2), t=U32(size_t(0x9b)), put4lsb(rcode, rcode_size, o, t);



        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.comp[i].limit)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0xffc0), 2);
        put(rcode, rcode_size, o, (0x25), 1), t=U32(size_t((1<<cp[2])-1)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.comp[i].limit)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);


        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.comp[i].a)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x85c0), 2);
        put(rcode, rcode_size, o, (0x755c), 2);


        put(rcode, rcode_size, o, (0x8b8f), 2), t=U32(size_t(((char*)&(pr.h[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x81e1), 2), t=U32(size_t((1<<cp[1])-1)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.comp[i].limit)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x2b048b), 3);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.comp[i].b)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);


        put(rcode, rcode_size, o, (0xa9), 1), t=U32(size_t((1<<cp[2])-1)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x7448), 2);


        put(rcode, rcode_size, o, (0x53), 1);
        put(rcode, rcode_size, o, (0x8b9f), 2), t=U32(size_t(((char*)&(pr.comp[i].limit)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x89da), 2);
        put(rcode, rcode_size, o, (0x29c3), 2);
        put(rcode, rcode_size, o, (0x31c9), 2);
        put(rcode, rcode_size, o, (0x81f9), 2), t=U32(size_t(0xff)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x741c), 2);
        put(rcode, rcode_size, o, (0xffca), 2);
        put(rcode, rcode_size, o, (0xffcb), 2);
        put(rcode, rcode_size, o, (0x81e2), 2), t=U32(size_t((1<<cp[2])-1)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x81e3), 2), t=U32(size_t((1<<cp[2])-1)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8a0416), 3);
        put(rcode, rcode_size, o, (0x3a041e), 3);
        put(rcode, rcode_size, o, (0x7504), 2);
        put(rcode, rcode_size, o, (0xffc1), 2);
        put(rcode, rcode_size, o, (0xebdc), 2);
        put(rcode, rcode_size, o, (0x5b), 1);
        put(rcode, rcode_size, o, (0x898f), 2), t=U32(size_t(((char*)&(pr.comp[i].a)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0xeb0e), 2);


        put(rcode, rcode_size, o, (0x3d), 1), t=U32(size_t(0xff)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x83d000), 3);
        put(rcode, rcode_size, o, (0x8987), 2), t=U32(size_t(((char*)&(pr.comp[i].a)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);


        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.h[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x25), 1), t=U32(size_t((1<<cp[1])-1)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x8b8f), 2), t=U32(size_t(((char*)&(pr.comp[i].limit)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x890c83), 3);

        break;

      case AVG:
        break;

      case MIX2:
# 3029 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.p[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x05), 1), t=U32(size_t(2048)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x0fb78447), 4), t=U32(size_t(((char*)&(pr.squasht)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x89e9), 2);
        put(rcode, rcode_size, o, (0xc1e10f), 3);
        put(rcode, rcode_size, o, (0x29e9), 2);
        put(rcode, rcode_size, o, (0x29c1), 2);
        put(rcode, rcode_size, o, (0x69c9), 2), t=U32(size_t(cp[4])), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0xc1f905), 3);


        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.comp[i].cxt)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8bb7), 2), t=U32(size_t(((char*)&(pr.comp[i].a16)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8d3446), 3);
        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.p[cp[2]])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x2b87), 2), t=U32(size_t(((char*)&(pr.p[cp[3]])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x0fafc1), 3);
        put(rcode, rcode_size, o, (0x05), 1), t=U32(size_t(1<<12)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0xc1f80d), 3);
        put(rcode, rcode_size, o, (0x0fb716), 3);
        put(rcode, rcode_size, o, (0x01d0), 2);
        put(rcode, rcode_size, o, (0xba), 1), t=U32(size_t(0xffff)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x39d0), 2);
        put(rcode, rcode_size, o, (0x0f4fc2), 3);
        put(rcode, rcode_size, o, (0x31d2), 2);
        put(rcode, rcode_size, o, (0x39d0), 2);
        put(rcode, rcode_size, o, (0x0f4cc2), 3);
        put(rcode, rcode_size, o, (0x668906), 3);
        break;

      case MIX:
# 3073 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.p[i])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x05), 1), t=U32(size_t(2048)), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x0fb78447), 4), t=U32(size_t(((char*)&(pr.squasht)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0x89e9), 2);
        put(rcode, rcode_size, o, (0xc1e10f), 3);
        put(rcode, rcode_size, o, (0x29e9), 2);
        put(rcode, rcode_size, o, (0x29c1), 2);
        put(rcode, rcode_size, o, (0x69c9), 2), t=U32(size_t(cp[4])), put4lsb(rcode, rcode_size, o, t);
        put(rcode, rcode_size, o, (0xc1f904), 3);


        put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.comp[i].cxt)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8bb7), 2), t=U32(size_t(((char*)&(pr.comp[i].cm)-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
        if (S==8) put(rcode, rcode_size, o, (0x48), 1);
        put(rcode, rcode_size, o, (0x8d3486), 3);

        for (int k=0; k<cp[3]; ++k) {
          put(rcode, rcode_size, o, (0x8b87), 2), t=U32(size_t(((char*)&(pr.p[cp[2]+k])-(char*)&pr))), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0x0fafc1), 3);
          put(rcode, rcode_size, o, (0x05), 1), t=U32(size_t(1<<12)), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0xc1f80d), 3);
          put(rcode, rcode_size, o, (0x0306), 2);
          put(rcode, rcode_size, o, (0xba), 1), t=U32(size_t((1<<19)-1)), put4lsb(rcode, rcode_size, o, t);
          put(rcode, rcode_size, o, (0x39d0), 2);
          put(rcode, rcode_size, o, (0x0f4fc2), 3);
          put(rcode, rcode_size, o, (0xf7d2), 2);
          put(rcode, rcode_size, o, (0x39d0), 2);
          put(rcode, rcode_size, o, (0x0f4cc2), 3);
          put(rcode, rcode_size, o, (0x8906), 2);
          if (k<cp[3]-1) {
            if (S==8) put(rcode, rcode_size, o, (0x48), 1);
            put(rcode, rcode_size, o, (0x83c604), 3);
          }
        }
        break;

      default:
        error("invalid ZPAQ component");
    }
  }


  put(rcode, rcode_size, o, (0x5f), 1);
  put(rcode, rcode_size, o, (0x5e), 1);
  put(rcode, rcode_size, o, (0x5d), 1);
  put(rcode, rcode_size, o, (0x5b), 1);
  put(rcode, rcode_size, o, (0xc3), 1);

  return o;
}





int Predictor::predict() {



  if (!pcode) {
    int n=assemble_p();
    allocx(pcode, pcode_size, n);
    if (!pcode || n!=assemble_p() || n<10 || pcode_size<10)
      error("predictor JIT failed");
  }
  
# 3139 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 3139 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                          ;
  return ((int(*)(Predictor*))&pcode[0])(this);

}



void Predictor::update(int y) {



  
# 3150 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp" 3 4
 (static_cast<void> (0))
# 3150 "/benchmark/RUNDIR-lrzip-9de7ccb/BUILD/libzpaq/libzpaq.cpp"
                          ;
  ((void(*)(Predictor*, int))&pcode[5])(this, y);


  c8+=c8+y;
  if (c8>=256) {
    z.run(c8-256);
    hmap4=1;
    c8=1;
    for (int i=0; i<z.header[6]; ++i) h[i]=z.H(i);
  }
  else if (c8>=16 && c8<32)
    hmap4=(hmap4&0xf)<<5|y<<4|1;
  else
    hmap4=(hmap4&0x1f0)|(((hmap4&0xf)*2+y)&0xf);

}



void ZPAQL::run(U32 input) {



  if (!rcode) {
    int n=assemble();
    allocx(rcode, rcode_size, n);
    if (!rcode || n<10 || rcode_size<10 || n!=assemble())
      error("run JIT failed");
  }
  a=input;
  if (!((int(*)())(&rcode[0]))())
    libzpaq::error("Bad ZPAQL opcode");

}

}
